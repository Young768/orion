#pragma once

#include <linux/perf_event.h>
#include <linux/hw_breakpoint.h>
#include <stddef.h>
#include <stdint.h>
#include <vector>

namespace orion {

class PerfCount {

public:
enum CountType
{
  PERF_COUNT_TYPE_HW_CPU_CYCLES,
  PERF_COUNT_TYPE_HW_INSTRUCTIONS,
  PERF_COUNT_TYPE_HW_CACHE_REFERENCES,
  PERF_COUNT_TYPE_HW_CACHE_MISSES,
  PERF_COUNT_TYPE_HW_BRANCH_INSTRUCTIONS,
  PERF_COUNT_TYPE_HW_BRANCH_MISSES,
  PERF_COUNT_TYPE_HW_BUS_CYCLES,
  PERF_COUNT_TYPE_HW_CACHE_L1I_READ_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_L1I_READ_MISS,
  PERF_COUNT_TYPE_HW_CACHE_L1I_WRITE_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_L1I_WRITE_MISS,
  PERF_COUNT_TYPE_HW_CACHE_L1I_PREFETCH_ACCESS,		// not working?
  PERF_COUNT_TYPE_HW_CACHE_L1I_PREFETCH_MISS,	        // not working?
  PERF_COUNT_TYPE_HW_CACHE_L1D_READ_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_L1D_READ_MISS,
  PERF_COUNT_TYPE_HW_CACHE_L1D_WRITE_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_L1D_WRITE_MISS,
  PERF_COUNT_TYPE_HW_CACHE_L1D_PREFETCH_ACCESS,		// not working?
  PERF_COUNT_TYPE_HW_CACHE_L1D_PREFETCH_MISS,			// not working?
  PERF_COUNT_TYPE_HW_CACHE_LL_READ_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_LL_READ_MISS,
  PERF_COUNT_TYPE_HW_CACHE_LL_WRITE_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_LL_WRITE_MISS,
  PERF_COUNT_TYPE_HW_CACHE_LL_PREFETCH_ACCESS,		// not working?
  PERF_COUNT_TYPE_HW_CACHE_LL_PREFETCH_MISS,			// not working?
  PERF_COUNT_TYPE_HW_CACHE_ITLB_READ_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_ITLB_READ_MISS,
  PERF_COUNT_TYPE_HW_CACHE_ITLB_WRITE_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_ITLB_WRITE_MISS,
  PERF_COUNT_TYPE_HW_CACHE_ITLB_PREFETCH_ACCESS,	// not working?
  PERF_COUNT_TYPE_HW_CACHE_ITLB_PREFETCH_MISS,		// not working?
  PERF_COUNT_TYPE_HW_CACHE_DTLB_READ_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_DTLB_READ_MISS,
  PERF_COUNT_TYPE_HW_CACHE_DTLB_WRITE_ACCESS,
  PERF_COUNT_TYPE_HW_CACHE_DTLB_WRITE_MISS,
  PERF_COUNT_TYPE_HW_CACHE_DTLB_PREFETCH_ACCESS,	// not working?
  PERF_COUNT_TYPE_HW_CACHE_DTLB_PREFETCH_MISS,		// not working?
  PERF_COUNT_TYPE_SW_CPU_CLOCK,
  PERF_COUNT_TYPE_SW_TASK_CLOCK,
  PERF_COUNT_TYPE_SW_PAGE_FAULTS,
  PERF_COUNT_TYPE_SW_CONTEXT_SWITCHES,
  PERF_COUNT_TYPE_SW_CPU_MIGRATIONS,
  PERF_COUNT_TYPE_SW_PAGE_FAULTS_MIN,
  PERF_COUNT_TYPE_SW_PAGE_FAULTS_MAJ,
  PERF_COUNT_TYPE_SW_ALIGNMENT_FAULTS,
  PERF_COUNT_TYPE_SW_EMULATION_FAULTS,
  PERF_COUNT_TYPE_MAX,
  PERF_COUNT_TYPE_INVALID = -1,
};

  PerfCount(const std::vector<CountType> &perf_count_types);

  void Start();
  void Stop();
  void Reset();
  uint64_t GetByType(CountType type) const;
  uint64_t GetByIndex(size_t index) const;

private:
  void Accumulate(bool additive);
  struct Context {
    CountType type;
    perf_event_attr event;
    int fd;
    uint64_t counter;
  };
  std::vector<Context> ctx_;
};

}

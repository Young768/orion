// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#ifndef PROTOBUF_task_2eproto__INCLUDED
#define PROTOBUF_task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace orion {
namespace bosen {
namespace task {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_task_2eproto();
void protobuf_AssignDesc_task_2eproto();
void protobuf_ShutdownFile_task_2eproto();

class CreateDistArray;
class CreateDistArrayBuffer;
class EvalExpr;
class RepartitionDistArray;
class UpdateDistArrayIndex;
class SetDistArrayBufferInfo;
class ExecForLoop;
class GetAccumulatorValue;

// ===================================================================

class CreateDistArray : public ::google::protobuf::Message {
 public:
  CreateDistArray();
  virtual ~CreateDistArray();

  CreateDistArray(const CreateDistArray& from);

  inline CreateDistArray& operator=(const CreateDistArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDistArray& default_instance();

  void Swap(CreateDistArray* other);

  // implements Message ----------------------------------------------

  CreateDistArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateDistArray& from);
  void MergeFrom(const CreateDistArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 parent_type = 2;
  inline bool has_parent_type() const;
  inline void clear_parent_type();
  static const int kParentTypeFieldNumber = 2;
  inline ::google::protobuf::int32 parent_type() const;
  inline void set_parent_type(::google::protobuf::int32 value);

  // required int32 map_type = 3;
  inline bool has_map_type() const;
  inline void clear_map_type();
  static const int kMapTypeFieldNumber = 3;
  inline ::google::protobuf::int32 map_type() const;
  inline void set_map_type(::google::protobuf::int32 value);

  // required int32 partition_scheme = 4;
  inline bool has_partition_scheme() const;
  inline void clear_partition_scheme();
  static const int kPartitionSchemeFieldNumber = 4;
  inline ::google::protobuf::int32 partition_scheme() const;
  inline void set_partition_scheme(::google::protobuf::int32 value);

  // required bool flatten_results = 5;
  inline bool has_flatten_results() const;
  inline void clear_flatten_results();
  static const int kFlattenResultsFieldNumber = 5;
  inline bool flatten_results() const;
  inline void set_flatten_results(bool value);

  // required uint64 num_dims = 6;
  inline bool has_num_dims() const;
  inline void clear_num_dims();
  static const int kNumDimsFieldNumber = 6;
  inline ::google::protobuf::uint64 num_dims() const;
  inline void set_num_dims(::google::protobuf::uint64 value);

  // required int32 value_type = 7;
  inline bool has_value_type() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 7;
  inline ::google::protobuf::int32 value_type() const;
  inline void set_value_type(::google::protobuf::int32 value);

  // optional string file_path = 8;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 8;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const char* value, size_t size);
  inline ::std::string* mutable_file_path();
  inline ::std::string* release_file_path();
  inline void set_allocated_file_path(::std::string* file_path);

  // optional int32 parent_id = 9;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 9;
  inline ::google::protobuf::int32 parent_id() const;
  inline void set_parent_id(::google::protobuf::int32 value);

  // optional int32 init_type = 10;
  inline bool has_init_type() const;
  inline void clear_init_type();
  static const int kInitTypeFieldNumber = 10;
  inline ::google::protobuf::int32 init_type() const;
  inline void set_init_type(::google::protobuf::int32 value);

  // optional int32 map_func_module = 11;
  inline bool has_map_func_module() const;
  inline void clear_map_func_module();
  static const int kMapFuncModuleFieldNumber = 11;
  inline ::google::protobuf::int32 map_func_module() const;
  inline void set_map_func_module(::google::protobuf::int32 value);

  // optional string map_func_name = 12;
  inline bool has_map_func_name() const;
  inline void clear_map_func_name();
  static const int kMapFuncNameFieldNumber = 12;
  inline const ::std::string& map_func_name() const;
  inline void set_map_func_name(const ::std::string& value);
  inline void set_map_func_name(const char* value);
  inline void set_map_func_name(const char* value, size_t size);
  inline ::std::string* mutable_map_func_name();
  inline ::std::string* release_map_func_name();
  inline void set_allocated_map_func_name(::std::string* map_func_name);

  // repeated int64 dims = 13;
  inline int dims_size() const;
  inline void clear_dims();
  static const int kDimsFieldNumber = 13;
  inline ::google::protobuf::int64 dims(int index) const;
  inline void set_dims(int index, ::google::protobuf::int64 value);
  inline void add_dims(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // optional int32 random_init_type = 15;
  inline bool has_random_init_type() const;
  inline void clear_random_init_type();
  static const int kRandomInitTypeFieldNumber = 15;
  inline ::google::protobuf::int32 random_init_type() const;
  inline void set_random_init_type(::google::protobuf::int32 value);

  // required bool is_dense = 16;
  inline bool has_is_dense() const;
  inline void clear_is_dense();
  static const int kIsDenseFieldNumber = 16;
  inline bool is_dense() const;
  inline void set_is_dense(bool value);

  // required string symbol = 17;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 17;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required bytes serialized_value_type = 18;
  inline bool has_serialized_value_type() const;
  inline void clear_serialized_value_type();
  static const int kSerializedValueTypeFieldNumber = 18;
  inline const ::std::string& serialized_value_type() const;
  inline void set_serialized_value_type(const ::std::string& value);
  inline void set_serialized_value_type(const char* value);
  inline void set_serialized_value_type(const void* value, size_t size);
  inline ::std::string* mutable_serialized_value_type();
  inline ::std::string* release_serialized_value_type();
  inline void set_allocated_serialized_value_type(::std::string* serialized_value_type);

  // optional bytes serialized_init_value = 19;
  inline bool has_serialized_init_value() const;
  inline void clear_serialized_init_value();
  static const int kSerializedInitValueFieldNumber = 19;
  inline const ::std::string& serialized_init_value() const;
  inline void set_serialized_init_value(const ::std::string& value);
  inline void set_serialized_init_value(const char* value);
  inline void set_serialized_init_value(const void* value, size_t size);
  inline ::std::string* mutable_serialized_init_value();
  inline ::std::string* release_serialized_init_value();
  inline void set_allocated_serialized_init_value(::std::string* serialized_init_value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.CreateDistArray)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_parent_type();
  inline void clear_has_parent_type();
  inline void set_has_map_type();
  inline void clear_has_map_type();
  inline void set_has_partition_scheme();
  inline void clear_has_partition_scheme();
  inline void set_has_flatten_results();
  inline void clear_has_flatten_results();
  inline void set_has_num_dims();
  inline void clear_has_num_dims();
  inline void set_has_value_type();
  inline void clear_has_value_type();
  inline void set_has_file_path();
  inline void clear_has_file_path();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();
  inline void set_has_init_type();
  inline void clear_has_init_type();
  inline void set_has_map_func_module();
  inline void clear_has_map_func_module();
  inline void set_has_map_func_name();
  inline void clear_has_map_func_name();
  inline void set_has_random_init_type();
  inline void clear_has_random_init_type();
  inline void set_has_is_dense();
  inline void clear_has_is_dense();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_serialized_value_type();
  inline void clear_has_serialized_value_type();
  inline void set_has_serialized_init_value();
  inline void clear_has_serialized_init_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_type_;
  ::google::protobuf::int32 map_type_;
  ::google::protobuf::int32 partition_scheme_;
  ::google::protobuf::uint64 num_dims_;
  ::std::string* file_path_;
  ::google::protobuf::int32 value_type_;
  ::google::protobuf::int32 parent_id_;
  ::google::protobuf::int32 init_type_;
  bool flatten_results_;
  bool is_dense_;
  ::std::string* map_func_name_;
  ::google::protobuf::int32 map_func_module_;
  ::google::protobuf::int32 random_init_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::std::string* symbol_;
  ::std::string* serialized_value_type_;
  ::std::string* serialized_init_value_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static CreateDistArray* default_instance_;
};
// -------------------------------------------------------------------

class CreateDistArrayBuffer : public ::google::protobuf::Message {
 public:
  CreateDistArrayBuffer();
  virtual ~CreateDistArrayBuffer();

  CreateDistArrayBuffer(const CreateDistArrayBuffer& from);

  inline CreateDistArrayBuffer& operator=(const CreateDistArrayBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDistArrayBuffer& default_instance();

  void Swap(CreateDistArrayBuffer* other);

  // implements Message ----------------------------------------------

  CreateDistArrayBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateDistArrayBuffer& from);
  void MergeFrom(const CreateDistArrayBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int64 dims = 2;
  inline int dims_size() const;
  inline void clear_dims();
  static const int kDimsFieldNumber = 2;
  inline ::google::protobuf::int64 dims(int index) const;
  inline void set_dims(int index, ::google::protobuf::int64 value);
  inline void add_dims(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dims() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dims();

  // required uint64 num_dims = 3;
  inline bool has_num_dims() const;
  inline void clear_num_dims();
  static const int kNumDimsFieldNumber = 3;
  inline ::google::protobuf::uint64 num_dims() const;
  inline void set_num_dims(::google::protobuf::uint64 value);

  // required bool is_dense = 4;
  inline bool has_is_dense() const;
  inline void clear_is_dense();
  static const int kIsDenseFieldNumber = 4;
  inline bool is_dense() const;
  inline void set_is_dense(bool value);

  // required int32 value_type = 5;
  inline bool has_value_type() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 5;
  inline ::google::protobuf::int32 value_type() const;
  inline void set_value_type(::google::protobuf::int32 value);

  // required bytes serialized_init_value = 6;
  inline bool has_serialized_init_value() const;
  inline void clear_serialized_init_value();
  static const int kSerializedInitValueFieldNumber = 6;
  inline const ::std::string& serialized_init_value() const;
  inline void set_serialized_init_value(const ::std::string& value);
  inline void set_serialized_init_value(const char* value);
  inline void set_serialized_init_value(const void* value, size_t size);
  inline ::std::string* mutable_serialized_init_value();
  inline ::std::string* release_serialized_init_value();
  inline void set_allocated_serialized_init_value(::std::string* serialized_init_value);

  // required string symbol = 7;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 7;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required bytes serialized_value_type = 8;
  inline bool has_serialized_value_type() const;
  inline void clear_serialized_value_type();
  static const int kSerializedValueTypeFieldNumber = 8;
  inline const ::std::string& serialized_value_type() const;
  inline void set_serialized_value_type(const ::std::string& value);
  inline void set_serialized_value_type(const char* value);
  inline void set_serialized_value_type(const void* value, size_t size);
  inline ::std::string* mutable_serialized_value_type();
  inline ::std::string* release_serialized_value_type();
  inline void set_allocated_serialized_value_type(::std::string* serialized_value_type);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.CreateDistArrayBuffer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num_dims();
  inline void clear_has_num_dims();
  inline void set_has_is_dense();
  inline void clear_has_is_dense();
  inline void set_has_value_type();
  inline void clear_has_value_type();
  inline void set_has_serialized_init_value();
  inline void clear_has_serialized_init_value();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_serialized_value_type();
  inline void clear_has_serialized_value_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dims_;
  ::google::protobuf::int32 id_;
  bool is_dense_;
  ::google::protobuf::uint64 num_dims_;
  ::std::string* serialized_init_value_;
  ::std::string* symbol_;
  ::std::string* serialized_value_type_;
  ::google::protobuf::int32 value_type_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static CreateDistArrayBuffer* default_instance_;
};
// -------------------------------------------------------------------

class EvalExpr : public ::google::protobuf::Message {
 public:
  EvalExpr();
  virtual ~EvalExpr();

  EvalExpr(const EvalExpr& from);

  inline EvalExpr& operator=(const EvalExpr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EvalExpr& default_instance();

  void Swap(EvalExpr* other);

  // implements Message ----------------------------------------------

  EvalExpr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EvalExpr& from);
  void MergeFrom(const EvalExpr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialized_expr = 1;
  inline bool has_serialized_expr() const;
  inline void clear_serialized_expr();
  static const int kSerializedExprFieldNumber = 1;
  inline const ::std::string& serialized_expr() const;
  inline void set_serialized_expr(const ::std::string& value);
  inline void set_serialized_expr(const char* value);
  inline void set_serialized_expr(const void* value, size_t size);
  inline ::std::string* mutable_serialized_expr();
  inline ::std::string* release_serialized_expr();
  inline void set_allocated_serialized_expr(::std::string* serialized_expr);

  // required int32 module = 2;
  inline bool has_module() const;
  inline void clear_module();
  static const int kModuleFieldNumber = 2;
  inline ::google::protobuf::int32 module() const;
  inline void set_module(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.EvalExpr)
 private:
  inline void set_has_serialized_expr();
  inline void clear_has_serialized_expr();
  inline void set_has_module();
  inline void clear_has_module();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serialized_expr_;
  ::google::protobuf::int32 module_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static EvalExpr* default_instance_;
};
// -------------------------------------------------------------------

class RepartitionDistArray : public ::google::protobuf::Message {
 public:
  RepartitionDistArray();
  virtual ~RepartitionDistArray();

  RepartitionDistArray(const RepartitionDistArray& from);

  inline RepartitionDistArray& operator=(const RepartitionDistArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepartitionDistArray& default_instance();

  void Swap(RepartitionDistArray* other);

  // implements Message ----------------------------------------------

  RepartitionDistArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RepartitionDistArray& from);
  void MergeFrom(const RepartitionDistArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string partition_func_name = 2;
  inline bool has_partition_func_name() const;
  inline void clear_partition_func_name();
  static const int kPartitionFuncNameFieldNumber = 2;
  inline const ::std::string& partition_func_name() const;
  inline void set_partition_func_name(const ::std::string& value);
  inline void set_partition_func_name(const char* value);
  inline void set_partition_func_name(const char* value, size_t size);
  inline ::std::string* mutable_partition_func_name();
  inline ::std::string* release_partition_func_name();
  inline void set_allocated_partition_func_name(::std::string* partition_func_name);

  // required int32 partition_scheme = 3;
  inline bool has_partition_scheme() const;
  inline void clear_partition_scheme();
  static const int kPartitionSchemeFieldNumber = 3;
  inline ::google::protobuf::int32 partition_scheme() const;
  inline void set_partition_scheme(::google::protobuf::int32 value);

  // required int32 index_type = 4;
  inline bool has_index_type() const;
  inline void clear_index_type();
  static const int kIndexTypeFieldNumber = 4;
  inline ::google::protobuf::int32 index_type() const;
  inline void set_index_type(::google::protobuf::int32 value);

  // required bool contiguous_partitions = 5;
  inline bool has_contiguous_partitions() const;
  inline void clear_contiguous_partitions();
  static const int kContiguousPartitionsFieldNumber = 5;
  inline bool contiguous_partitions() const;
  inline void set_contiguous_partitions(bool value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.RepartitionDistArray)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_partition_func_name();
  inline void clear_has_partition_func_name();
  inline void set_has_partition_scheme();
  inline void clear_has_partition_scheme();
  inline void set_has_index_type();
  inline void clear_has_index_type();
  inline void set_has_contiguous_partitions();
  inline void clear_has_contiguous_partitions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* partition_func_name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 partition_scheme_;
  ::google::protobuf::int32 index_type_;
  bool contiguous_partitions_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static RepartitionDistArray* default_instance_;
};
// -------------------------------------------------------------------

class UpdateDistArrayIndex : public ::google::protobuf::Message {
 public:
  UpdateDistArrayIndex();
  virtual ~UpdateDistArrayIndex();

  UpdateDistArrayIndex(const UpdateDistArrayIndex& from);

  inline UpdateDistArrayIndex& operator=(const UpdateDistArrayIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDistArrayIndex& default_instance();

  void Swap(UpdateDistArrayIndex* other);

  // implements Message ----------------------------------------------

  UpdateDistArrayIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateDistArrayIndex& from);
  void MergeFrom(const UpdateDistArrayIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 index_type = 2;
  inline bool has_index_type() const;
  inline void clear_index_type();
  static const int kIndexTypeFieldNumber = 2;
  inline ::google::protobuf::int32 index_type() const;
  inline void set_index_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.UpdateDistArrayIndex)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_index_type();
  inline void clear_has_index_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 index_type_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static UpdateDistArrayIndex* default_instance_;
};
// -------------------------------------------------------------------

class SetDistArrayBufferInfo : public ::google::protobuf::Message {
 public:
  SetDistArrayBufferInfo();
  virtual ~SetDistArrayBufferInfo();

  SetDistArrayBufferInfo(const SetDistArrayBufferInfo& from);

  inline SetDistArrayBufferInfo& operator=(const SetDistArrayBufferInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetDistArrayBufferInfo& default_instance();

  void Swap(SetDistArrayBufferInfo* other);

  // implements Message ----------------------------------------------

  SetDistArrayBufferInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetDistArrayBufferInfo& from);
  void MergeFrom(const SetDistArrayBufferInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dist_array_buffer_id = 1;
  inline bool has_dist_array_buffer_id() const;
  inline void clear_dist_array_buffer_id();
  static const int kDistArrayBufferIdFieldNumber = 1;
  inline ::google::protobuf::int32 dist_array_buffer_id() const;
  inline void set_dist_array_buffer_id(::google::protobuf::int32 value);

  // required int32 dist_array_id = 2;
  inline bool has_dist_array_id() const;
  inline void clear_dist_array_id();
  static const int kDistArrayIdFieldNumber = 2;
  inline ::google::protobuf::int32 dist_array_id() const;
  inline void set_dist_array_id(::google::protobuf::int32 value);

  // required string apply_buffer_func_name = 3;
  inline bool has_apply_buffer_func_name() const;
  inline void clear_apply_buffer_func_name();
  static const int kApplyBufferFuncNameFieldNumber = 3;
  inline const ::std::string& apply_buffer_func_name() const;
  inline void set_apply_buffer_func_name(const ::std::string& value);
  inline void set_apply_buffer_func_name(const char* value);
  inline void set_apply_buffer_func_name(const char* value, size_t size);
  inline ::std::string* mutable_apply_buffer_func_name();
  inline ::std::string* release_apply_buffer_func_name();
  inline void set_allocated_apply_buffer_func_name(::std::string* apply_buffer_func_name);

  // repeated int32 helper_dist_array_ids = 4;
  inline int helper_dist_array_ids_size() const;
  inline void clear_helper_dist_array_ids();
  static const int kHelperDistArrayIdsFieldNumber = 4;
  inline ::google::protobuf::int32 helper_dist_array_ids(int index) const;
  inline void set_helper_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_helper_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      helper_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_helper_dist_array_ids();

  // repeated int32 helper_dist_array_buffer_ids = 5;
  inline int helper_dist_array_buffer_ids_size() const;
  inline void clear_helper_dist_array_buffer_ids();
  static const int kHelperDistArrayBufferIdsFieldNumber = 5;
  inline ::google::protobuf::int32 helper_dist_array_buffer_ids(int index) const;
  inline void set_helper_dist_array_buffer_ids(int index, ::google::protobuf::int32 value);
  inline void add_helper_dist_array_buffer_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      helper_dist_array_buffer_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_helper_dist_array_buffer_ids();

  // required int32 delay_mode = 6;
  inline bool has_delay_mode() const;
  inline void clear_delay_mode();
  static const int kDelayModeFieldNumber = 6;
  inline ::google::protobuf::int32 delay_mode() const;
  inline void set_delay_mode(::google::protobuf::int32 value);

  // required uint64 max_delay = 7;
  inline bool has_max_delay() const;
  inline void clear_max_delay();
  static const int kMaxDelayFieldNumber = 7;
  inline ::google::protobuf::uint64 max_delay() const;
  inline void set_max_delay(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.SetDistArrayBufferInfo)
 private:
  inline void set_has_dist_array_buffer_id();
  inline void clear_has_dist_array_buffer_id();
  inline void set_has_dist_array_id();
  inline void clear_has_dist_array_id();
  inline void set_has_apply_buffer_func_name();
  inline void clear_has_apply_buffer_func_name();
  inline void set_has_delay_mode();
  inline void clear_has_delay_mode();
  inline void set_has_max_delay();
  inline void clear_has_max_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 dist_array_buffer_id_;
  ::google::protobuf::int32 dist_array_id_;
  ::std::string* apply_buffer_func_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > helper_dist_array_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > helper_dist_array_buffer_ids_;
  ::google::protobuf::uint64 max_delay_;
  ::google::protobuf::int32 delay_mode_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static SetDistArrayBufferInfo* default_instance_;
};
// -------------------------------------------------------------------

class ExecForLoop : public ::google::protobuf::Message {
 public:
  ExecForLoop();
  virtual ~ExecForLoop();

  ExecForLoop(const ExecForLoop& from);

  inline ExecForLoop& operator=(const ExecForLoop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecForLoop& default_instance();

  void Swap(ExecForLoop* other);

  // implements Message ----------------------------------------------

  ExecForLoop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecForLoop& from);
  void MergeFrom(const ExecForLoop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 exec_for_loop_id = 1;
  inline bool has_exec_for_loop_id() const;
  inline void clear_exec_for_loop_id();
  static const int kExecForLoopIdFieldNumber = 1;
  inline ::google::protobuf::int32 exec_for_loop_id() const;
  inline void set_exec_for_loop_id(::google::protobuf::int32 value);

  // required int32 iteration_space_id = 2;
  inline bool has_iteration_space_id() const;
  inline void clear_iteration_space_id();
  static const int kIterationSpaceIdFieldNumber = 2;
  inline ::google::protobuf::int32 iteration_space_id() const;
  inline void set_iteration_space_id(::google::protobuf::int32 value);

  // required int32 parallel_scheme = 3;
  inline bool has_parallel_scheme() const;
  inline void clear_parallel_scheme();
  static const int kParallelSchemeFieldNumber = 3;
  inline ::google::protobuf::int32 parallel_scheme() const;
  inline void set_parallel_scheme(::google::protobuf::int32 value);

  // repeated int32 space_partitioned_dist_array_ids = 4;
  inline int space_partitioned_dist_array_ids_size() const;
  inline void clear_space_partitioned_dist_array_ids();
  static const int kSpacePartitionedDistArrayIdsFieldNumber = 4;
  inline ::google::protobuf::int32 space_partitioned_dist_array_ids(int index) const;
  inline void set_space_partitioned_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_space_partitioned_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      space_partitioned_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_space_partitioned_dist_array_ids();

  // repeated int32 time_partitioned_dist_array_ids = 5;
  inline int time_partitioned_dist_array_ids_size() const;
  inline void clear_time_partitioned_dist_array_ids();
  static const int kTimePartitionedDistArrayIdsFieldNumber = 5;
  inline ::google::protobuf::int32 time_partitioned_dist_array_ids(int index) const;
  inline void set_time_partitioned_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_time_partitioned_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      time_partitioned_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_time_partitioned_dist_array_ids();

  // repeated int32 global_indexed_dist_array_ids = 6;
  inline int global_indexed_dist_array_ids_size() const;
  inline void clear_global_indexed_dist_array_ids();
  static const int kGlobalIndexedDistArrayIdsFieldNumber = 6;
  inline ::google::protobuf::int32 global_indexed_dist_array_ids(int index) const;
  inline void set_global_indexed_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_global_indexed_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      global_indexed_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_global_indexed_dist_array_ids();

  // repeated int32 dist_array_buffer_ids = 7;
  inline int dist_array_buffer_ids_size() const;
  inline void clear_dist_array_buffer_ids();
  static const int kDistArrayBufferIdsFieldNumber = 7;
  inline ::google::protobuf::int32 dist_array_buffer_ids(int index) const;
  inline void set_dist_array_buffer_ids(int index, ::google::protobuf::int32 value);
  inline void add_dist_array_buffer_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dist_array_buffer_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dist_array_buffer_ids();

  // repeated int32 written_dist_array_ids = 8;
  inline int written_dist_array_ids_size() const;
  inline void clear_written_dist_array_ids();
  static const int kWrittenDistArrayIdsFieldNumber = 8;
  inline ::google::protobuf::int32 written_dist_array_ids(int index) const;
  inline void set_written_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_written_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      written_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_written_dist_array_ids();

  // repeated int32 accessed_dist_array_ids = 9;
  inline int accessed_dist_array_ids_size() const;
  inline void clear_accessed_dist_array_ids();
  static const int kAccessedDistArrayIdsFieldNumber = 9;
  inline ::google::protobuf::int32 accessed_dist_array_ids(int index) const;
  inline void set_accessed_dist_array_ids(int index, ::google::protobuf::int32 value);
  inline void add_accessed_dist_array_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      accessed_dist_array_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_accessed_dist_array_ids();

  // repeated bytes global_read_only_var_vals = 10;
  inline int global_read_only_var_vals_size() const;
  inline void clear_global_read_only_var_vals();
  static const int kGlobalReadOnlyVarValsFieldNumber = 10;
  inline const ::std::string& global_read_only_var_vals(int index) const;
  inline ::std::string* mutable_global_read_only_var_vals(int index);
  inline void set_global_read_only_var_vals(int index, const ::std::string& value);
  inline void set_global_read_only_var_vals(int index, const char* value);
  inline void set_global_read_only_var_vals(int index, const void* value, size_t size);
  inline ::std::string* add_global_read_only_var_vals();
  inline void add_global_read_only_var_vals(const ::std::string& value);
  inline void add_global_read_only_var_vals(const char* value);
  inline void add_global_read_only_var_vals(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& global_read_only_var_vals() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_global_read_only_var_vals();

  // repeated string accumulator_var_syms = 11;
  inline int accumulator_var_syms_size() const;
  inline void clear_accumulator_var_syms();
  static const int kAccumulatorVarSymsFieldNumber = 11;
  inline const ::std::string& accumulator_var_syms(int index) const;
  inline ::std::string* mutable_accumulator_var_syms(int index);
  inline void set_accumulator_var_syms(int index, const ::std::string& value);
  inline void set_accumulator_var_syms(int index, const char* value);
  inline void set_accumulator_var_syms(int index, const char* value, size_t size);
  inline ::std::string* add_accumulator_var_syms();
  inline void add_accumulator_var_syms(const ::std::string& value);
  inline void add_accumulator_var_syms(const char* value);
  inline void add_accumulator_var_syms(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& accumulator_var_syms() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_accumulator_var_syms();

  // required string loop_batch_func_name = 12;
  inline bool has_loop_batch_func_name() const;
  inline void clear_loop_batch_func_name();
  static const int kLoopBatchFuncNameFieldNumber = 12;
  inline const ::std::string& loop_batch_func_name() const;
  inline void set_loop_batch_func_name(const ::std::string& value);
  inline void set_loop_batch_func_name(const char* value);
  inline void set_loop_batch_func_name(const char* value, size_t size);
  inline ::std::string* mutable_loop_batch_func_name();
  inline ::std::string* release_loop_batch_func_name();
  inline void set_allocated_loop_batch_func_name(::std::string* loop_batch_func_name);

  // optional string prefetch_batch_func_name = 13;
  inline bool has_prefetch_batch_func_name() const;
  inline void clear_prefetch_batch_func_name();
  static const int kPrefetchBatchFuncNameFieldNumber = 13;
  inline const ::std::string& prefetch_batch_func_name() const;
  inline void set_prefetch_batch_func_name(const ::std::string& value);
  inline void set_prefetch_batch_func_name(const char* value);
  inline void set_prefetch_batch_func_name(const char* value, size_t size);
  inline ::std::string* mutable_prefetch_batch_func_name();
  inline ::std::string* release_prefetch_batch_func_name();
  inline void set_allocated_prefetch_batch_func_name(::std::string* prefetch_batch_func_name);

  // required bool is_ordered = 14;
  inline bool has_is_ordered() const;
  inline void clear_is_ordered();
  static const int kIsOrderedFieldNumber = 14;
  inline bool is_ordered() const;
  inline void set_is_ordered(bool value);

  // required bool is_repeated = 15;
  inline bool has_is_repeated() const;
  inline void clear_is_repeated();
  static const int kIsRepeatedFieldNumber = 15;
  inline bool is_repeated() const;
  inline void set_is_repeated(bool value);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.ExecForLoop)
 private:
  inline void set_has_exec_for_loop_id();
  inline void clear_has_exec_for_loop_id();
  inline void set_has_iteration_space_id();
  inline void clear_has_iteration_space_id();
  inline void set_has_parallel_scheme();
  inline void clear_has_parallel_scheme();
  inline void set_has_loop_batch_func_name();
  inline void clear_has_loop_batch_func_name();
  inline void set_has_prefetch_batch_func_name();
  inline void clear_has_prefetch_batch_func_name();
  inline void set_has_is_ordered();
  inline void clear_has_is_ordered();
  inline void set_has_is_repeated();
  inline void clear_has_is_repeated();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 exec_for_loop_id_;
  ::google::protobuf::int32 iteration_space_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > space_partitioned_dist_array_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > time_partitioned_dist_array_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > global_indexed_dist_array_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dist_array_buffer_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > written_dist_array_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > accessed_dist_array_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> global_read_only_var_vals_;
  ::google::protobuf::int32 parallel_scheme_;
  bool is_ordered_;
  bool is_repeated_;
  ::google::protobuf::RepeatedPtrField< ::std::string> accumulator_var_syms_;
  ::std::string* loop_batch_func_name_;
  ::std::string* prefetch_batch_func_name_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static ExecForLoop* default_instance_;
};
// -------------------------------------------------------------------

class GetAccumulatorValue : public ::google::protobuf::Message {
 public:
  GetAccumulatorValue();
  virtual ~GetAccumulatorValue();

  GetAccumulatorValue(const GetAccumulatorValue& from);

  inline GetAccumulatorValue& operator=(const GetAccumulatorValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccumulatorValue& default_instance();

  void Swap(GetAccumulatorValue* other);

  // implements Message ----------------------------------------------

  GetAccumulatorValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccumulatorValue& from);
  void MergeFrom(const GetAccumulatorValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required string combiner = 2;
  inline bool has_combiner() const;
  inline void clear_combiner();
  static const int kCombinerFieldNumber = 2;
  inline const ::std::string& combiner() const;
  inline void set_combiner(const ::std::string& value);
  inline void set_combiner(const char* value);
  inline void set_combiner(const char* value, size_t size);
  inline ::std::string* mutable_combiner();
  inline ::std::string* release_combiner();
  inline void set_allocated_combiner(::std::string* combiner);

  // @@protoc_insertion_point(class_scope:orion.bosen.task.GetAccumulatorValue)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_combiner();
  inline void clear_has_combiner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* symbol_;
  ::std::string* combiner_;
  friend void  protobuf_AddDesc_task_2eproto();
  friend void protobuf_AssignDesc_task_2eproto();
  friend void protobuf_ShutdownFile_task_2eproto();

  void InitAsDefaultInstance();
  static GetAccumulatorValue* default_instance_;
};
// ===================================================================


// ===================================================================

// CreateDistArray

// required int32 id = 1;
inline bool CreateDistArray::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateDistArray::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateDistArray::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateDistArray::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CreateDistArray::id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.id)
  return id_;
}
inline void CreateDistArray::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.id)
}

// required int32 parent_type = 2;
inline bool CreateDistArray::has_parent_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateDistArray::set_has_parent_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateDistArray::clear_has_parent_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateDistArray::clear_parent_type() {
  parent_type_ = 0;
  clear_has_parent_type();
}
inline ::google::protobuf::int32 CreateDistArray::parent_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.parent_type)
  return parent_type_;
}
inline void CreateDistArray::set_parent_type(::google::protobuf::int32 value) {
  set_has_parent_type();
  parent_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.parent_type)
}

// required int32 map_type = 3;
inline bool CreateDistArray::has_map_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateDistArray::set_has_map_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateDistArray::clear_has_map_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateDistArray::clear_map_type() {
  map_type_ = 0;
  clear_has_map_type();
}
inline ::google::protobuf::int32 CreateDistArray::map_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.map_type)
  return map_type_;
}
inline void CreateDistArray::set_map_type(::google::protobuf::int32 value) {
  set_has_map_type();
  map_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.map_type)
}

// required int32 partition_scheme = 4;
inline bool CreateDistArray::has_partition_scheme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateDistArray::set_has_partition_scheme() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateDistArray::clear_has_partition_scheme() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateDistArray::clear_partition_scheme() {
  partition_scheme_ = 0;
  clear_has_partition_scheme();
}
inline ::google::protobuf::int32 CreateDistArray::partition_scheme() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.partition_scheme)
  return partition_scheme_;
}
inline void CreateDistArray::set_partition_scheme(::google::protobuf::int32 value) {
  set_has_partition_scheme();
  partition_scheme_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.partition_scheme)
}

// required bool flatten_results = 5;
inline bool CreateDistArray::has_flatten_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateDistArray::set_has_flatten_results() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateDistArray::clear_has_flatten_results() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateDistArray::clear_flatten_results() {
  flatten_results_ = false;
  clear_has_flatten_results();
}
inline bool CreateDistArray::flatten_results() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.flatten_results)
  return flatten_results_;
}
inline void CreateDistArray::set_flatten_results(bool value) {
  set_has_flatten_results();
  flatten_results_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.flatten_results)
}

// required uint64 num_dims = 6;
inline bool CreateDistArray::has_num_dims() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateDistArray::set_has_num_dims() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateDistArray::clear_has_num_dims() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateDistArray::clear_num_dims() {
  num_dims_ = GOOGLE_ULONGLONG(0);
  clear_has_num_dims();
}
inline ::google::protobuf::uint64 CreateDistArray::num_dims() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.num_dims)
  return num_dims_;
}
inline void CreateDistArray::set_num_dims(::google::protobuf::uint64 value) {
  set_has_num_dims();
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.num_dims)
}

// required int32 value_type = 7;
inline bool CreateDistArray::has_value_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateDistArray::set_has_value_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateDistArray::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateDistArray::clear_value_type() {
  value_type_ = 0;
  clear_has_value_type();
}
inline ::google::protobuf::int32 CreateDistArray::value_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.value_type)
  return value_type_;
}
inline void CreateDistArray::set_value_type(::google::protobuf::int32 value) {
  set_has_value_type();
  value_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.value_type)
}

// optional string file_path = 8;
inline bool CreateDistArray::has_file_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateDistArray::set_has_file_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateDistArray::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateDistArray::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& CreateDistArray::file_path() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.file_path)
  return *file_path_;
}
inline void CreateDistArray::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.file_path)
}
inline void CreateDistArray::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArray.file_path)
}
inline void CreateDistArray::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArray.file_path)
}
inline ::std::string* CreateDistArray::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArray.file_path)
  return file_path_;
}
inline ::std::string* CreateDistArray::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArray::set_allocated_file_path(::std::string* file_path) {
  if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (file_path) {
    set_has_file_path();
    file_path_ = file_path;
  } else {
    clear_has_file_path();
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArray.file_path)
}

// optional int32 parent_id = 9;
inline bool CreateDistArray::has_parent_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateDistArray::set_has_parent_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateDistArray::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateDistArray::clear_parent_id() {
  parent_id_ = 0;
  clear_has_parent_id();
}
inline ::google::protobuf::int32 CreateDistArray::parent_id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.parent_id)
  return parent_id_;
}
inline void CreateDistArray::set_parent_id(::google::protobuf::int32 value) {
  set_has_parent_id();
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.parent_id)
}

// optional int32 init_type = 10;
inline bool CreateDistArray::has_init_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CreateDistArray::set_has_init_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CreateDistArray::clear_has_init_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CreateDistArray::clear_init_type() {
  init_type_ = 0;
  clear_has_init_type();
}
inline ::google::protobuf::int32 CreateDistArray::init_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.init_type)
  return init_type_;
}
inline void CreateDistArray::set_init_type(::google::protobuf::int32 value) {
  set_has_init_type();
  init_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.init_type)
}

// optional int32 map_func_module = 11;
inline bool CreateDistArray::has_map_func_module() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateDistArray::set_has_map_func_module() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateDistArray::clear_has_map_func_module() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateDistArray::clear_map_func_module() {
  map_func_module_ = 0;
  clear_has_map_func_module();
}
inline ::google::protobuf::int32 CreateDistArray::map_func_module() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.map_func_module)
  return map_func_module_;
}
inline void CreateDistArray::set_map_func_module(::google::protobuf::int32 value) {
  set_has_map_func_module();
  map_func_module_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.map_func_module)
}

// optional string map_func_name = 12;
inline bool CreateDistArray::has_map_func_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateDistArray::set_has_map_func_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateDistArray::clear_has_map_func_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateDistArray::clear_map_func_name() {
  if (map_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_func_name_->clear();
  }
  clear_has_map_func_name();
}
inline const ::std::string& CreateDistArray::map_func_name() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.map_func_name)
  return *map_func_name_;
}
inline void CreateDistArray::set_map_func_name(const ::std::string& value) {
  set_has_map_func_name();
  if (map_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_func_name_ = new ::std::string;
  }
  map_func_name_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.map_func_name)
}
inline void CreateDistArray::set_map_func_name(const char* value) {
  set_has_map_func_name();
  if (map_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_func_name_ = new ::std::string;
  }
  map_func_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArray.map_func_name)
}
inline void CreateDistArray::set_map_func_name(const char* value, size_t size) {
  set_has_map_func_name();
  if (map_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_func_name_ = new ::std::string;
  }
  map_func_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArray.map_func_name)
}
inline ::std::string* CreateDistArray::mutable_map_func_name() {
  set_has_map_func_name();
  if (map_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    map_func_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArray.map_func_name)
  return map_func_name_;
}
inline ::std::string* CreateDistArray::release_map_func_name() {
  clear_has_map_func_name();
  if (map_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = map_func_name_;
    map_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArray::set_allocated_map_func_name(::std::string* map_func_name) {
  if (map_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_func_name_;
  }
  if (map_func_name) {
    set_has_map_func_name();
    map_func_name_ = map_func_name;
  } else {
    clear_has_map_func_name();
    map_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArray.map_func_name)
}

// repeated int64 dims = 13;
inline int CreateDistArray::dims_size() const {
  return dims_.size();
}
inline void CreateDistArray::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 CreateDistArray::dims(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.dims)
  return dims_.Get(index);
}
inline void CreateDistArray::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.dims)
}
inline void CreateDistArray::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.CreateDistArray.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CreateDistArray::dims() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.CreateDistArray.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CreateDistArray::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.CreateDistArray.dims)
  return &dims_;
}

// optional int32 random_init_type = 15;
inline bool CreateDistArray::has_random_init_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CreateDistArray::set_has_random_init_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CreateDistArray::clear_has_random_init_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CreateDistArray::clear_random_init_type() {
  random_init_type_ = 0;
  clear_has_random_init_type();
}
inline ::google::protobuf::int32 CreateDistArray::random_init_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.random_init_type)
  return random_init_type_;
}
inline void CreateDistArray::set_random_init_type(::google::protobuf::int32 value) {
  set_has_random_init_type();
  random_init_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.random_init_type)
}

// required bool is_dense = 16;
inline bool CreateDistArray::has_is_dense() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CreateDistArray::set_has_is_dense() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CreateDistArray::clear_has_is_dense() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CreateDistArray::clear_is_dense() {
  is_dense_ = false;
  clear_has_is_dense();
}
inline bool CreateDistArray::is_dense() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.is_dense)
  return is_dense_;
}
inline void CreateDistArray::set_is_dense(bool value) {
  set_has_is_dense();
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.is_dense)
}

// required string symbol = 17;
inline bool CreateDistArray::has_symbol() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CreateDistArray::set_has_symbol() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CreateDistArray::clear_has_symbol() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CreateDistArray::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& CreateDistArray::symbol() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.symbol)
  return *symbol_;
}
inline void CreateDistArray::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.symbol)
}
inline void CreateDistArray::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArray.symbol)
}
inline void CreateDistArray::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArray.symbol)
}
inline ::std::string* CreateDistArray::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArray.symbol)
  return symbol_;
}
inline ::std::string* CreateDistArray::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArray::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArray.symbol)
}

// required bytes serialized_value_type = 18;
inline bool CreateDistArray::has_serialized_value_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CreateDistArray::set_has_serialized_value_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CreateDistArray::clear_has_serialized_value_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CreateDistArray::clear_serialized_value_type() {
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_->clear();
  }
  clear_has_serialized_value_type();
}
inline const ::std::string& CreateDistArray::serialized_value_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.serialized_value_type)
  return *serialized_value_type_;
}
inline void CreateDistArray::set_serialized_value_type(const ::std::string& value) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.serialized_value_type)
}
inline void CreateDistArray::set_serialized_value_type(const char* value) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArray.serialized_value_type)
}
inline void CreateDistArray::set_serialized_value_type(const void* value, size_t size) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArray.serialized_value_type)
}
inline ::std::string* CreateDistArray::mutable_serialized_value_type() {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArray.serialized_value_type)
  return serialized_value_type_;
}
inline ::std::string* CreateDistArray::release_serialized_value_type() {
  clear_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_value_type_;
    serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArray::set_allocated_serialized_value_type(::std::string* serialized_value_type) {
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_value_type_;
  }
  if (serialized_value_type) {
    set_has_serialized_value_type();
    serialized_value_type_ = serialized_value_type;
  } else {
    clear_has_serialized_value_type();
    serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArray.serialized_value_type)
}

// optional bytes serialized_init_value = 19;
inline bool CreateDistArray::has_serialized_init_value() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CreateDistArray::set_has_serialized_init_value() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CreateDistArray::clear_has_serialized_init_value() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CreateDistArray::clear_serialized_init_value() {
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_->clear();
  }
  clear_has_serialized_init_value();
}
inline const ::std::string& CreateDistArray::serialized_init_value() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArray.serialized_init_value)
  return *serialized_init_value_;
}
inline void CreateDistArray::set_serialized_init_value(const ::std::string& value) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArray.serialized_init_value)
}
inline void CreateDistArray::set_serialized_init_value(const char* value) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArray.serialized_init_value)
}
inline void CreateDistArray::set_serialized_init_value(const void* value, size_t size) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArray.serialized_init_value)
}
inline ::std::string* CreateDistArray::mutable_serialized_init_value() {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArray.serialized_init_value)
  return serialized_init_value_;
}
inline ::std::string* CreateDistArray::release_serialized_init_value() {
  clear_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_init_value_;
    serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArray::set_allocated_serialized_init_value(::std::string* serialized_init_value) {
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_init_value_;
  }
  if (serialized_init_value) {
    set_has_serialized_init_value();
    serialized_init_value_ = serialized_init_value;
  } else {
    clear_has_serialized_init_value();
    serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArray.serialized_init_value)
}

// -------------------------------------------------------------------

// CreateDistArrayBuffer

// required int32 id = 1;
inline bool CreateDistArrayBuffer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateDistArrayBuffer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateDistArrayBuffer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateDistArrayBuffer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CreateDistArrayBuffer::id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.id)
  return id_;
}
inline void CreateDistArrayBuffer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.id)
}

// repeated int64 dims = 2;
inline int CreateDistArrayBuffer::dims_size() const {
  return dims_.size();
}
inline void CreateDistArrayBuffer::clear_dims() {
  dims_.Clear();
}
inline ::google::protobuf::int64 CreateDistArrayBuffer::dims(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.dims)
  return dims_.Get(index);
}
inline void CreateDistArrayBuffer::set_dims(int index, ::google::protobuf::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.dims)
}
inline void CreateDistArrayBuffer::add_dims(::google::protobuf::int64 value) {
  dims_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.CreateDistArrayBuffer.dims)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CreateDistArrayBuffer::dims() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.CreateDistArrayBuffer.dims)
  return dims_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CreateDistArrayBuffer::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.CreateDistArrayBuffer.dims)
  return &dims_;
}

// required uint64 num_dims = 3;
inline bool CreateDistArrayBuffer::has_num_dims() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateDistArrayBuffer::set_has_num_dims() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateDistArrayBuffer::clear_has_num_dims() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateDistArrayBuffer::clear_num_dims() {
  num_dims_ = GOOGLE_ULONGLONG(0);
  clear_has_num_dims();
}
inline ::google::protobuf::uint64 CreateDistArrayBuffer::num_dims() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.num_dims)
  return num_dims_;
}
inline void CreateDistArrayBuffer::set_num_dims(::google::protobuf::uint64 value) {
  set_has_num_dims();
  num_dims_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.num_dims)
}

// required bool is_dense = 4;
inline bool CreateDistArrayBuffer::has_is_dense() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateDistArrayBuffer::set_has_is_dense() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateDistArrayBuffer::clear_has_is_dense() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateDistArrayBuffer::clear_is_dense() {
  is_dense_ = false;
  clear_has_is_dense();
}
inline bool CreateDistArrayBuffer::is_dense() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.is_dense)
  return is_dense_;
}
inline void CreateDistArrayBuffer::set_is_dense(bool value) {
  set_has_is_dense();
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.is_dense)
}

// required int32 value_type = 5;
inline bool CreateDistArrayBuffer::has_value_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateDistArrayBuffer::set_has_value_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateDistArrayBuffer::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateDistArrayBuffer::clear_value_type() {
  value_type_ = 0;
  clear_has_value_type();
}
inline ::google::protobuf::int32 CreateDistArrayBuffer::value_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.value_type)
  return value_type_;
}
inline void CreateDistArrayBuffer::set_value_type(::google::protobuf::int32 value) {
  set_has_value_type();
  value_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.value_type)
}

// required bytes serialized_init_value = 6;
inline bool CreateDistArrayBuffer::has_serialized_init_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateDistArrayBuffer::set_has_serialized_init_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateDistArrayBuffer::clear_has_serialized_init_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateDistArrayBuffer::clear_serialized_init_value() {
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_->clear();
  }
  clear_has_serialized_init_value();
}
inline const ::std::string& CreateDistArrayBuffer::serialized_init_value() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
  return *serialized_init_value_;
}
inline void CreateDistArrayBuffer::set_serialized_init_value(const ::std::string& value) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
}
inline void CreateDistArrayBuffer::set_serialized_init_value(const char* value) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
}
inline void CreateDistArrayBuffer::set_serialized_init_value(const void* value, size_t size) {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  serialized_init_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
}
inline ::std::string* CreateDistArrayBuffer::mutable_serialized_init_value() {
  set_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_init_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
  return serialized_init_value_;
}
inline ::std::string* CreateDistArrayBuffer::release_serialized_init_value() {
  clear_has_serialized_init_value();
  if (serialized_init_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_init_value_;
    serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArrayBuffer::set_allocated_serialized_init_value(::std::string* serialized_init_value) {
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_init_value_;
  }
  if (serialized_init_value) {
    set_has_serialized_init_value();
    serialized_init_value_ = serialized_init_value;
  } else {
    clear_has_serialized_init_value();
    serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArrayBuffer.serialized_init_value)
}

// required string symbol = 7;
inline bool CreateDistArrayBuffer::has_symbol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateDistArrayBuffer::set_has_symbol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateDistArrayBuffer::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateDistArrayBuffer::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& CreateDistArrayBuffer::symbol() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.symbol)
  return *symbol_;
}
inline void CreateDistArrayBuffer::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.symbol)
}
inline void CreateDistArrayBuffer::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArrayBuffer.symbol)
}
inline void CreateDistArrayBuffer::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArrayBuffer.symbol)
}
inline ::std::string* CreateDistArrayBuffer::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArrayBuffer.symbol)
  return symbol_;
}
inline ::std::string* CreateDistArrayBuffer::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArrayBuffer::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArrayBuffer.symbol)
}

// required bytes serialized_value_type = 8;
inline bool CreateDistArrayBuffer::has_serialized_value_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateDistArrayBuffer::set_has_serialized_value_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateDistArrayBuffer::clear_has_serialized_value_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateDistArrayBuffer::clear_serialized_value_type() {
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_->clear();
  }
  clear_has_serialized_value_type();
}
inline const ::std::string& CreateDistArrayBuffer::serialized_value_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
  return *serialized_value_type_;
}
inline void CreateDistArrayBuffer::set_serialized_value_type(const ::std::string& value) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
}
inline void CreateDistArrayBuffer::set_serialized_value_type(const char* value) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
}
inline void CreateDistArrayBuffer::set_serialized_value_type(const void* value, size_t size) {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  serialized_value_type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
}
inline ::std::string* CreateDistArrayBuffer::mutable_serialized_value_type() {
  set_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_value_type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
  return serialized_value_type_;
}
inline ::std::string* CreateDistArrayBuffer::release_serialized_value_type() {
  clear_has_serialized_value_type();
  if (serialized_value_type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_value_type_;
    serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CreateDistArrayBuffer::set_allocated_serialized_value_type(::std::string* serialized_value_type) {
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_value_type_;
  }
  if (serialized_value_type) {
    set_has_serialized_value_type();
    serialized_value_type_ = serialized_value_type;
  } else {
    clear_has_serialized_value_type();
    serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.CreateDistArrayBuffer.serialized_value_type)
}

// -------------------------------------------------------------------

// EvalExpr

// required bytes serialized_expr = 1;
inline bool EvalExpr::has_serialized_expr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EvalExpr::set_has_serialized_expr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EvalExpr::clear_has_serialized_expr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EvalExpr::clear_serialized_expr() {
  if (serialized_expr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_expr_->clear();
  }
  clear_has_serialized_expr();
}
inline const ::std::string& EvalExpr::serialized_expr() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.EvalExpr.serialized_expr)
  return *serialized_expr_;
}
inline void EvalExpr::set_serialized_expr(const ::std::string& value) {
  set_has_serialized_expr();
  if (serialized_expr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_expr_ = new ::std::string;
  }
  serialized_expr_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.EvalExpr.serialized_expr)
}
inline void EvalExpr::set_serialized_expr(const char* value) {
  set_has_serialized_expr();
  if (serialized_expr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_expr_ = new ::std::string;
  }
  serialized_expr_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.EvalExpr.serialized_expr)
}
inline void EvalExpr::set_serialized_expr(const void* value, size_t size) {
  set_has_serialized_expr();
  if (serialized_expr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_expr_ = new ::std::string;
  }
  serialized_expr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.EvalExpr.serialized_expr)
}
inline ::std::string* EvalExpr::mutable_serialized_expr() {
  set_has_serialized_expr();
  if (serialized_expr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serialized_expr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.EvalExpr.serialized_expr)
  return serialized_expr_;
}
inline ::std::string* EvalExpr::release_serialized_expr() {
  clear_has_serialized_expr();
  if (serialized_expr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serialized_expr_;
    serialized_expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EvalExpr::set_allocated_serialized_expr(::std::string* serialized_expr) {
  if (serialized_expr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_expr_;
  }
  if (serialized_expr) {
    set_has_serialized_expr();
    serialized_expr_ = serialized_expr;
  } else {
    clear_has_serialized_expr();
    serialized_expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.EvalExpr.serialized_expr)
}

// required int32 module = 2;
inline bool EvalExpr::has_module() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EvalExpr::set_has_module() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EvalExpr::clear_has_module() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EvalExpr::clear_module() {
  module_ = 0;
  clear_has_module();
}
inline ::google::protobuf::int32 EvalExpr::module() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.EvalExpr.module)
  return module_;
}
inline void EvalExpr::set_module(::google::protobuf::int32 value) {
  set_has_module();
  module_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.EvalExpr.module)
}

// -------------------------------------------------------------------

// RepartitionDistArray

// required int32 id = 1;
inline bool RepartitionDistArray::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepartitionDistArray::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepartitionDistArray::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepartitionDistArray::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RepartitionDistArray::id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.RepartitionDistArray.id)
  return id_;
}
inline void RepartitionDistArray::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.RepartitionDistArray.id)
}

// optional string partition_func_name = 2;
inline bool RepartitionDistArray::has_partition_func_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepartitionDistArray::set_has_partition_func_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepartitionDistArray::clear_has_partition_func_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepartitionDistArray::clear_partition_func_name() {
  if (partition_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_func_name_->clear();
  }
  clear_has_partition_func_name();
}
inline const ::std::string& RepartitionDistArray::partition_func_name() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.RepartitionDistArray.partition_func_name)
  return *partition_func_name_;
}
inline void RepartitionDistArray::set_partition_func_name(const ::std::string& value) {
  set_has_partition_func_name();
  if (partition_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_func_name_ = new ::std::string;
  }
  partition_func_name_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.RepartitionDistArray.partition_func_name)
}
inline void RepartitionDistArray::set_partition_func_name(const char* value) {
  set_has_partition_func_name();
  if (partition_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_func_name_ = new ::std::string;
  }
  partition_func_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.RepartitionDistArray.partition_func_name)
}
inline void RepartitionDistArray::set_partition_func_name(const char* value, size_t size) {
  set_has_partition_func_name();
  if (partition_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_func_name_ = new ::std::string;
  }
  partition_func_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.RepartitionDistArray.partition_func_name)
}
inline ::std::string* RepartitionDistArray::mutable_partition_func_name() {
  set_has_partition_func_name();
  if (partition_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partition_func_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.RepartitionDistArray.partition_func_name)
  return partition_func_name_;
}
inline ::std::string* RepartitionDistArray::release_partition_func_name() {
  clear_has_partition_func_name();
  if (partition_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partition_func_name_;
    partition_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RepartitionDistArray::set_allocated_partition_func_name(::std::string* partition_func_name) {
  if (partition_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partition_func_name_;
  }
  if (partition_func_name) {
    set_has_partition_func_name();
    partition_func_name_ = partition_func_name;
  } else {
    clear_has_partition_func_name();
    partition_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.RepartitionDistArray.partition_func_name)
}

// required int32 partition_scheme = 3;
inline bool RepartitionDistArray::has_partition_scheme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RepartitionDistArray::set_has_partition_scheme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RepartitionDistArray::clear_has_partition_scheme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RepartitionDistArray::clear_partition_scheme() {
  partition_scheme_ = 0;
  clear_has_partition_scheme();
}
inline ::google::protobuf::int32 RepartitionDistArray::partition_scheme() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.RepartitionDistArray.partition_scheme)
  return partition_scheme_;
}
inline void RepartitionDistArray::set_partition_scheme(::google::protobuf::int32 value) {
  set_has_partition_scheme();
  partition_scheme_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.RepartitionDistArray.partition_scheme)
}

// required int32 index_type = 4;
inline bool RepartitionDistArray::has_index_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RepartitionDistArray::set_has_index_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RepartitionDistArray::clear_has_index_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RepartitionDistArray::clear_index_type() {
  index_type_ = 0;
  clear_has_index_type();
}
inline ::google::protobuf::int32 RepartitionDistArray::index_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.RepartitionDistArray.index_type)
  return index_type_;
}
inline void RepartitionDistArray::set_index_type(::google::protobuf::int32 value) {
  set_has_index_type();
  index_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.RepartitionDistArray.index_type)
}

// required bool contiguous_partitions = 5;
inline bool RepartitionDistArray::has_contiguous_partitions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RepartitionDistArray::set_has_contiguous_partitions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RepartitionDistArray::clear_has_contiguous_partitions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RepartitionDistArray::clear_contiguous_partitions() {
  contiguous_partitions_ = false;
  clear_has_contiguous_partitions();
}
inline bool RepartitionDistArray::contiguous_partitions() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.RepartitionDistArray.contiguous_partitions)
  return contiguous_partitions_;
}
inline void RepartitionDistArray::set_contiguous_partitions(bool value) {
  set_has_contiguous_partitions();
  contiguous_partitions_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.RepartitionDistArray.contiguous_partitions)
}

// -------------------------------------------------------------------

// UpdateDistArrayIndex

// required int32 id = 1;
inline bool UpdateDistArrayIndex::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateDistArrayIndex::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateDistArrayIndex::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateDistArrayIndex::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UpdateDistArrayIndex::id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.UpdateDistArrayIndex.id)
  return id_;
}
inline void UpdateDistArrayIndex::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.UpdateDistArrayIndex.id)
}

// required int32 index_type = 2;
inline bool UpdateDistArrayIndex::has_index_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateDistArrayIndex::set_has_index_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateDistArrayIndex::clear_has_index_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateDistArrayIndex::clear_index_type() {
  index_type_ = 0;
  clear_has_index_type();
}
inline ::google::protobuf::int32 UpdateDistArrayIndex::index_type() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.UpdateDistArrayIndex.index_type)
  return index_type_;
}
inline void UpdateDistArrayIndex::set_index_type(::google::protobuf::int32 value) {
  set_has_index_type();
  index_type_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.UpdateDistArrayIndex.index_type)
}

// -------------------------------------------------------------------

// SetDistArrayBufferInfo

// required int32 dist_array_buffer_id = 1;
inline bool SetDistArrayBufferInfo::has_dist_array_buffer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetDistArrayBufferInfo::set_has_dist_array_buffer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetDistArrayBufferInfo::clear_has_dist_array_buffer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetDistArrayBufferInfo::clear_dist_array_buffer_id() {
  dist_array_buffer_id_ = 0;
  clear_has_dist_array_buffer_id();
}
inline ::google::protobuf::int32 SetDistArrayBufferInfo::dist_array_buffer_id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.dist_array_buffer_id)
  return dist_array_buffer_id_;
}
inline void SetDistArrayBufferInfo::set_dist_array_buffer_id(::google::protobuf::int32 value) {
  set_has_dist_array_buffer_id();
  dist_array_buffer_id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.dist_array_buffer_id)
}

// required int32 dist_array_id = 2;
inline bool SetDistArrayBufferInfo::has_dist_array_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetDistArrayBufferInfo::set_has_dist_array_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetDistArrayBufferInfo::clear_has_dist_array_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetDistArrayBufferInfo::clear_dist_array_id() {
  dist_array_id_ = 0;
  clear_has_dist_array_id();
}
inline ::google::protobuf::int32 SetDistArrayBufferInfo::dist_array_id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.dist_array_id)
  return dist_array_id_;
}
inline void SetDistArrayBufferInfo::set_dist_array_id(::google::protobuf::int32 value) {
  set_has_dist_array_id();
  dist_array_id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.dist_array_id)
}

// required string apply_buffer_func_name = 3;
inline bool SetDistArrayBufferInfo::has_apply_buffer_func_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetDistArrayBufferInfo::set_has_apply_buffer_func_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetDistArrayBufferInfo::clear_has_apply_buffer_func_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetDistArrayBufferInfo::clear_apply_buffer_func_name() {
  if (apply_buffer_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apply_buffer_func_name_->clear();
  }
  clear_has_apply_buffer_func_name();
}
inline const ::std::string& SetDistArrayBufferInfo::apply_buffer_func_name() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
  return *apply_buffer_func_name_;
}
inline void SetDistArrayBufferInfo::set_apply_buffer_func_name(const ::std::string& value) {
  set_has_apply_buffer_func_name();
  if (apply_buffer_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apply_buffer_func_name_ = new ::std::string;
  }
  apply_buffer_func_name_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
}
inline void SetDistArrayBufferInfo::set_apply_buffer_func_name(const char* value) {
  set_has_apply_buffer_func_name();
  if (apply_buffer_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apply_buffer_func_name_ = new ::std::string;
  }
  apply_buffer_func_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
}
inline void SetDistArrayBufferInfo::set_apply_buffer_func_name(const char* value, size_t size) {
  set_has_apply_buffer_func_name();
  if (apply_buffer_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apply_buffer_func_name_ = new ::std::string;
  }
  apply_buffer_func_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
}
inline ::std::string* SetDistArrayBufferInfo::mutable_apply_buffer_func_name() {
  set_has_apply_buffer_func_name();
  if (apply_buffer_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    apply_buffer_func_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
  return apply_buffer_func_name_;
}
inline ::std::string* SetDistArrayBufferInfo::release_apply_buffer_func_name() {
  clear_has_apply_buffer_func_name();
  if (apply_buffer_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = apply_buffer_func_name_;
    apply_buffer_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SetDistArrayBufferInfo::set_allocated_apply_buffer_func_name(::std::string* apply_buffer_func_name) {
  if (apply_buffer_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apply_buffer_func_name_;
  }
  if (apply_buffer_func_name) {
    set_has_apply_buffer_func_name();
    apply_buffer_func_name_ = apply_buffer_func_name;
  } else {
    clear_has_apply_buffer_func_name();
    apply_buffer_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.SetDistArrayBufferInfo.apply_buffer_func_name)
}

// repeated int32 helper_dist_array_ids = 4;
inline int SetDistArrayBufferInfo::helper_dist_array_ids_size() const {
  return helper_dist_array_ids_.size();
}
inline void SetDistArrayBufferInfo::clear_helper_dist_array_ids() {
  helper_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 SetDistArrayBufferInfo::helper_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_ids)
  return helper_dist_array_ids_.Get(index);
}
inline void SetDistArrayBufferInfo::set_helper_dist_array_ids(int index, ::google::protobuf::int32 value) {
  helper_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_ids)
}
inline void SetDistArrayBufferInfo::add_helper_dist_array_ids(::google::protobuf::int32 value) {
  helper_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SetDistArrayBufferInfo::helper_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_ids)
  return helper_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SetDistArrayBufferInfo::mutable_helper_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_ids)
  return &helper_dist_array_ids_;
}

// repeated int32 helper_dist_array_buffer_ids = 5;
inline int SetDistArrayBufferInfo::helper_dist_array_buffer_ids_size() const {
  return helper_dist_array_buffer_ids_.size();
}
inline void SetDistArrayBufferInfo::clear_helper_dist_array_buffer_ids() {
  helper_dist_array_buffer_ids_.Clear();
}
inline ::google::protobuf::int32 SetDistArrayBufferInfo::helper_dist_array_buffer_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_buffer_ids)
  return helper_dist_array_buffer_ids_.Get(index);
}
inline void SetDistArrayBufferInfo::set_helper_dist_array_buffer_ids(int index, ::google::protobuf::int32 value) {
  helper_dist_array_buffer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_buffer_ids)
}
inline void SetDistArrayBufferInfo::add_helper_dist_array_buffer_ids(::google::protobuf::int32 value) {
  helper_dist_array_buffer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_buffer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SetDistArrayBufferInfo::helper_dist_array_buffer_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_buffer_ids)
  return helper_dist_array_buffer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SetDistArrayBufferInfo::mutable_helper_dist_array_buffer_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.SetDistArrayBufferInfo.helper_dist_array_buffer_ids)
  return &helper_dist_array_buffer_ids_;
}

// required int32 delay_mode = 6;
inline bool SetDistArrayBufferInfo::has_delay_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SetDistArrayBufferInfo::set_has_delay_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SetDistArrayBufferInfo::clear_has_delay_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SetDistArrayBufferInfo::clear_delay_mode() {
  delay_mode_ = 0;
  clear_has_delay_mode();
}
inline ::google::protobuf::int32 SetDistArrayBufferInfo::delay_mode() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.delay_mode)
  return delay_mode_;
}
inline void SetDistArrayBufferInfo::set_delay_mode(::google::protobuf::int32 value) {
  set_has_delay_mode();
  delay_mode_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.delay_mode)
}

// required uint64 max_delay = 7;
inline bool SetDistArrayBufferInfo::has_max_delay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SetDistArrayBufferInfo::set_has_max_delay() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SetDistArrayBufferInfo::clear_has_max_delay() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SetDistArrayBufferInfo::clear_max_delay() {
  max_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_max_delay();
}
inline ::google::protobuf::uint64 SetDistArrayBufferInfo::max_delay() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.SetDistArrayBufferInfo.max_delay)
  return max_delay_;
}
inline void SetDistArrayBufferInfo::set_max_delay(::google::protobuf::uint64 value) {
  set_has_max_delay();
  max_delay_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.SetDistArrayBufferInfo.max_delay)
}

// -------------------------------------------------------------------

// ExecForLoop

// required int32 exec_for_loop_id = 1;
inline bool ExecForLoop::has_exec_for_loop_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecForLoop::set_has_exec_for_loop_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecForLoop::clear_has_exec_for_loop_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecForLoop::clear_exec_for_loop_id() {
  exec_for_loop_id_ = 0;
  clear_has_exec_for_loop_id();
}
inline ::google::protobuf::int32 ExecForLoop::exec_for_loop_id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.exec_for_loop_id)
  return exec_for_loop_id_;
}
inline void ExecForLoop::set_exec_for_loop_id(::google::protobuf::int32 value) {
  set_has_exec_for_loop_id();
  exec_for_loop_id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.exec_for_loop_id)
}

// required int32 iteration_space_id = 2;
inline bool ExecForLoop::has_iteration_space_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecForLoop::set_has_iteration_space_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecForLoop::clear_has_iteration_space_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecForLoop::clear_iteration_space_id() {
  iteration_space_id_ = 0;
  clear_has_iteration_space_id();
}
inline ::google::protobuf::int32 ExecForLoop::iteration_space_id() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.iteration_space_id)
  return iteration_space_id_;
}
inline void ExecForLoop::set_iteration_space_id(::google::protobuf::int32 value) {
  set_has_iteration_space_id();
  iteration_space_id_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.iteration_space_id)
}

// required int32 parallel_scheme = 3;
inline bool ExecForLoop::has_parallel_scheme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecForLoop::set_has_parallel_scheme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecForLoop::clear_has_parallel_scheme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecForLoop::clear_parallel_scheme() {
  parallel_scheme_ = 0;
  clear_has_parallel_scheme();
}
inline ::google::protobuf::int32 ExecForLoop::parallel_scheme() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.parallel_scheme)
  return parallel_scheme_;
}
inline void ExecForLoop::set_parallel_scheme(::google::protobuf::int32 value) {
  set_has_parallel_scheme();
  parallel_scheme_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.parallel_scheme)
}

// repeated int32 space_partitioned_dist_array_ids = 4;
inline int ExecForLoop::space_partitioned_dist_array_ids_size() const {
  return space_partitioned_dist_array_ids_.size();
}
inline void ExecForLoop::clear_space_partitioned_dist_array_ids() {
  space_partitioned_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::space_partitioned_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.space_partitioned_dist_array_ids)
  return space_partitioned_dist_array_ids_.Get(index);
}
inline void ExecForLoop::set_space_partitioned_dist_array_ids(int index, ::google::protobuf::int32 value) {
  space_partitioned_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.space_partitioned_dist_array_ids)
}
inline void ExecForLoop::add_space_partitioned_dist_array_ids(::google::protobuf::int32 value) {
  space_partitioned_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.space_partitioned_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::space_partitioned_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.space_partitioned_dist_array_ids)
  return space_partitioned_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_space_partitioned_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.space_partitioned_dist_array_ids)
  return &space_partitioned_dist_array_ids_;
}

// repeated int32 time_partitioned_dist_array_ids = 5;
inline int ExecForLoop::time_partitioned_dist_array_ids_size() const {
  return time_partitioned_dist_array_ids_.size();
}
inline void ExecForLoop::clear_time_partitioned_dist_array_ids() {
  time_partitioned_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::time_partitioned_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.time_partitioned_dist_array_ids)
  return time_partitioned_dist_array_ids_.Get(index);
}
inline void ExecForLoop::set_time_partitioned_dist_array_ids(int index, ::google::protobuf::int32 value) {
  time_partitioned_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.time_partitioned_dist_array_ids)
}
inline void ExecForLoop::add_time_partitioned_dist_array_ids(::google::protobuf::int32 value) {
  time_partitioned_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.time_partitioned_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::time_partitioned_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.time_partitioned_dist_array_ids)
  return time_partitioned_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_time_partitioned_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.time_partitioned_dist_array_ids)
  return &time_partitioned_dist_array_ids_;
}

// repeated int32 global_indexed_dist_array_ids = 6;
inline int ExecForLoop::global_indexed_dist_array_ids_size() const {
  return global_indexed_dist_array_ids_.size();
}
inline void ExecForLoop::clear_global_indexed_dist_array_ids() {
  global_indexed_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::global_indexed_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.global_indexed_dist_array_ids)
  return global_indexed_dist_array_ids_.Get(index);
}
inline void ExecForLoop::set_global_indexed_dist_array_ids(int index, ::google::protobuf::int32 value) {
  global_indexed_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.global_indexed_dist_array_ids)
}
inline void ExecForLoop::add_global_indexed_dist_array_ids(::google::protobuf::int32 value) {
  global_indexed_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.global_indexed_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::global_indexed_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.global_indexed_dist_array_ids)
  return global_indexed_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_global_indexed_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.global_indexed_dist_array_ids)
  return &global_indexed_dist_array_ids_;
}

// repeated int32 dist_array_buffer_ids = 7;
inline int ExecForLoop::dist_array_buffer_ids_size() const {
  return dist_array_buffer_ids_.size();
}
inline void ExecForLoop::clear_dist_array_buffer_ids() {
  dist_array_buffer_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::dist_array_buffer_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.dist_array_buffer_ids)
  return dist_array_buffer_ids_.Get(index);
}
inline void ExecForLoop::set_dist_array_buffer_ids(int index, ::google::protobuf::int32 value) {
  dist_array_buffer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.dist_array_buffer_ids)
}
inline void ExecForLoop::add_dist_array_buffer_ids(::google::protobuf::int32 value) {
  dist_array_buffer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.dist_array_buffer_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::dist_array_buffer_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.dist_array_buffer_ids)
  return dist_array_buffer_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_dist_array_buffer_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.dist_array_buffer_ids)
  return &dist_array_buffer_ids_;
}

// repeated int32 written_dist_array_ids = 8;
inline int ExecForLoop::written_dist_array_ids_size() const {
  return written_dist_array_ids_.size();
}
inline void ExecForLoop::clear_written_dist_array_ids() {
  written_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::written_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.written_dist_array_ids)
  return written_dist_array_ids_.Get(index);
}
inline void ExecForLoop::set_written_dist_array_ids(int index, ::google::protobuf::int32 value) {
  written_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.written_dist_array_ids)
}
inline void ExecForLoop::add_written_dist_array_ids(::google::protobuf::int32 value) {
  written_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.written_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::written_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.written_dist_array_ids)
  return written_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_written_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.written_dist_array_ids)
  return &written_dist_array_ids_;
}

// repeated int32 accessed_dist_array_ids = 9;
inline int ExecForLoop::accessed_dist_array_ids_size() const {
  return accessed_dist_array_ids_.size();
}
inline void ExecForLoop::clear_accessed_dist_array_ids() {
  accessed_dist_array_ids_.Clear();
}
inline ::google::protobuf::int32 ExecForLoop::accessed_dist_array_ids(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.accessed_dist_array_ids)
  return accessed_dist_array_ids_.Get(index);
}
inline void ExecForLoop::set_accessed_dist_array_ids(int index, ::google::protobuf::int32 value) {
  accessed_dist_array_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.accessed_dist_array_ids)
}
inline void ExecForLoop::add_accessed_dist_array_ids(::google::protobuf::int32 value) {
  accessed_dist_array_ids_.Add(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.accessed_dist_array_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ExecForLoop::accessed_dist_array_ids() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.accessed_dist_array_ids)
  return accessed_dist_array_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ExecForLoop::mutable_accessed_dist_array_ids() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.accessed_dist_array_ids)
  return &accessed_dist_array_ids_;
}

// repeated bytes global_read_only_var_vals = 10;
inline int ExecForLoop::global_read_only_var_vals_size() const {
  return global_read_only_var_vals_.size();
}
inline void ExecForLoop::clear_global_read_only_var_vals() {
  global_read_only_var_vals_.Clear();
}
inline const ::std::string& ExecForLoop::global_read_only_var_vals(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
  return global_read_only_var_vals_.Get(index);
}
inline ::std::string* ExecForLoop::mutable_global_read_only_var_vals(int index) {
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
  return global_read_only_var_vals_.Mutable(index);
}
inline void ExecForLoop::set_global_read_only_var_vals(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
  global_read_only_var_vals_.Mutable(index)->assign(value);
}
inline void ExecForLoop::set_global_read_only_var_vals(int index, const char* value) {
  global_read_only_var_vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
}
inline void ExecForLoop::set_global_read_only_var_vals(int index, const void* value, size_t size) {
  global_read_only_var_vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
}
inline ::std::string* ExecForLoop::add_global_read_only_var_vals() {
  return global_read_only_var_vals_.Add();
}
inline void ExecForLoop::add_global_read_only_var_vals(const ::std::string& value) {
  global_read_only_var_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
}
inline void ExecForLoop::add_global_read_only_var_vals(const char* value) {
  global_read_only_var_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
}
inline void ExecForLoop::add_global_read_only_var_vals(const void* value, size_t size) {
  global_read_only_var_vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecForLoop::global_read_only_var_vals() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
  return global_read_only_var_vals_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecForLoop::mutable_global_read_only_var_vals() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.global_read_only_var_vals)
  return &global_read_only_var_vals_;
}

// repeated string accumulator_var_syms = 11;
inline int ExecForLoop::accumulator_var_syms_size() const {
  return accumulator_var_syms_.size();
}
inline void ExecForLoop::clear_accumulator_var_syms() {
  accumulator_var_syms_.Clear();
}
inline const ::std::string& ExecForLoop::accumulator_var_syms(int index) const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.accumulator_var_syms)
  return accumulator_var_syms_.Get(index);
}
inline ::std::string* ExecForLoop::mutable_accumulator_var_syms(int index) {
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.ExecForLoop.accumulator_var_syms)
  return accumulator_var_syms_.Mutable(index);
}
inline void ExecForLoop::set_accumulator_var_syms(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.accumulator_var_syms)
  accumulator_var_syms_.Mutable(index)->assign(value);
}
inline void ExecForLoop::set_accumulator_var_syms(int index, const char* value) {
  accumulator_var_syms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.ExecForLoop.accumulator_var_syms)
}
inline void ExecForLoop::set_accumulator_var_syms(int index, const char* value, size_t size) {
  accumulator_var_syms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.ExecForLoop.accumulator_var_syms)
}
inline ::std::string* ExecForLoop::add_accumulator_var_syms() {
  return accumulator_var_syms_.Add();
}
inline void ExecForLoop::add_accumulator_var_syms(const ::std::string& value) {
  accumulator_var_syms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:orion.bosen.task.ExecForLoop.accumulator_var_syms)
}
inline void ExecForLoop::add_accumulator_var_syms(const char* value) {
  accumulator_var_syms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:orion.bosen.task.ExecForLoop.accumulator_var_syms)
}
inline void ExecForLoop::add_accumulator_var_syms(const char* value, size_t size) {
  accumulator_var_syms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:orion.bosen.task.ExecForLoop.accumulator_var_syms)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ExecForLoop::accumulator_var_syms() const {
  // @@protoc_insertion_point(field_list:orion.bosen.task.ExecForLoop.accumulator_var_syms)
  return accumulator_var_syms_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ExecForLoop::mutable_accumulator_var_syms() {
  // @@protoc_insertion_point(field_mutable_list:orion.bosen.task.ExecForLoop.accumulator_var_syms)
  return &accumulator_var_syms_;
}

// required string loop_batch_func_name = 12;
inline bool ExecForLoop::has_loop_batch_func_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ExecForLoop::set_has_loop_batch_func_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ExecForLoop::clear_has_loop_batch_func_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ExecForLoop::clear_loop_batch_func_name() {
  if (loop_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loop_batch_func_name_->clear();
  }
  clear_has_loop_batch_func_name();
}
inline const ::std::string& ExecForLoop::loop_batch_func_name() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.loop_batch_func_name)
  return *loop_batch_func_name_;
}
inline void ExecForLoop::set_loop_batch_func_name(const ::std::string& value) {
  set_has_loop_batch_func_name();
  if (loop_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loop_batch_func_name_ = new ::std::string;
  }
  loop_batch_func_name_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.loop_batch_func_name)
}
inline void ExecForLoop::set_loop_batch_func_name(const char* value) {
  set_has_loop_batch_func_name();
  if (loop_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loop_batch_func_name_ = new ::std::string;
  }
  loop_batch_func_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.ExecForLoop.loop_batch_func_name)
}
inline void ExecForLoop::set_loop_batch_func_name(const char* value, size_t size) {
  set_has_loop_batch_func_name();
  if (loop_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loop_batch_func_name_ = new ::std::string;
  }
  loop_batch_func_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.ExecForLoop.loop_batch_func_name)
}
inline ::std::string* ExecForLoop::mutable_loop_batch_func_name() {
  set_has_loop_batch_func_name();
  if (loop_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loop_batch_func_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.ExecForLoop.loop_batch_func_name)
  return loop_batch_func_name_;
}
inline ::std::string* ExecForLoop::release_loop_batch_func_name() {
  clear_has_loop_batch_func_name();
  if (loop_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loop_batch_func_name_;
    loop_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecForLoop::set_allocated_loop_batch_func_name(::std::string* loop_batch_func_name) {
  if (loop_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loop_batch_func_name_;
  }
  if (loop_batch_func_name) {
    set_has_loop_batch_func_name();
    loop_batch_func_name_ = loop_batch_func_name;
  } else {
    clear_has_loop_batch_func_name();
    loop_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.ExecForLoop.loop_batch_func_name)
}

// optional string prefetch_batch_func_name = 13;
inline bool ExecForLoop::has_prefetch_batch_func_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ExecForLoop::set_has_prefetch_batch_func_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ExecForLoop::clear_has_prefetch_batch_func_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ExecForLoop::clear_prefetch_batch_func_name() {
  if (prefetch_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefetch_batch_func_name_->clear();
  }
  clear_has_prefetch_batch_func_name();
}
inline const ::std::string& ExecForLoop::prefetch_batch_func_name() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
  return *prefetch_batch_func_name_;
}
inline void ExecForLoop::set_prefetch_batch_func_name(const ::std::string& value) {
  set_has_prefetch_batch_func_name();
  if (prefetch_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefetch_batch_func_name_ = new ::std::string;
  }
  prefetch_batch_func_name_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
}
inline void ExecForLoop::set_prefetch_batch_func_name(const char* value) {
  set_has_prefetch_batch_func_name();
  if (prefetch_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefetch_batch_func_name_ = new ::std::string;
  }
  prefetch_batch_func_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
}
inline void ExecForLoop::set_prefetch_batch_func_name(const char* value, size_t size) {
  set_has_prefetch_batch_func_name();
  if (prefetch_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefetch_batch_func_name_ = new ::std::string;
  }
  prefetch_batch_func_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
}
inline ::std::string* ExecForLoop::mutable_prefetch_batch_func_name() {
  set_has_prefetch_batch_func_name();
  if (prefetch_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefetch_batch_func_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
  return prefetch_batch_func_name_;
}
inline ::std::string* ExecForLoop::release_prefetch_batch_func_name() {
  clear_has_prefetch_batch_func_name();
  if (prefetch_batch_func_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prefetch_batch_func_name_;
    prefetch_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecForLoop::set_allocated_prefetch_batch_func_name(::std::string* prefetch_batch_func_name) {
  if (prefetch_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefetch_batch_func_name_;
  }
  if (prefetch_batch_func_name) {
    set_has_prefetch_batch_func_name();
    prefetch_batch_func_name_ = prefetch_batch_func_name;
  } else {
    clear_has_prefetch_batch_func_name();
    prefetch_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.ExecForLoop.prefetch_batch_func_name)
}

// required bool is_ordered = 14;
inline bool ExecForLoop::has_is_ordered() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ExecForLoop::set_has_is_ordered() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ExecForLoop::clear_has_is_ordered() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ExecForLoop::clear_is_ordered() {
  is_ordered_ = false;
  clear_has_is_ordered();
}
inline bool ExecForLoop::is_ordered() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.is_ordered)
  return is_ordered_;
}
inline void ExecForLoop::set_is_ordered(bool value) {
  set_has_is_ordered();
  is_ordered_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.is_ordered)
}

// required bool is_repeated = 15;
inline bool ExecForLoop::has_is_repeated() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ExecForLoop::set_has_is_repeated() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ExecForLoop::clear_has_is_repeated() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ExecForLoop::clear_is_repeated() {
  is_repeated_ = false;
  clear_has_is_repeated();
}
inline bool ExecForLoop::is_repeated() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.ExecForLoop.is_repeated)
  return is_repeated_;
}
inline void ExecForLoop::set_is_repeated(bool value) {
  set_has_is_repeated();
  is_repeated_ = value;
  // @@protoc_insertion_point(field_set:orion.bosen.task.ExecForLoop.is_repeated)
}

// -------------------------------------------------------------------

// GetAccumulatorValue

// required string symbol = 1;
inline bool GetAccumulatorValue::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAccumulatorValue::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAccumulatorValue::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAccumulatorValue::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& GetAccumulatorValue::symbol() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.GetAccumulatorValue.symbol)
  return *symbol_;
}
inline void GetAccumulatorValue::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.GetAccumulatorValue.symbol)
}
inline void GetAccumulatorValue::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.GetAccumulatorValue.symbol)
}
inline void GetAccumulatorValue::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.GetAccumulatorValue.symbol)
}
inline ::std::string* GetAccumulatorValue::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.GetAccumulatorValue.symbol)
  return symbol_;
}
inline ::std::string* GetAccumulatorValue::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAccumulatorValue::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.GetAccumulatorValue.symbol)
}

// required string combiner = 2;
inline bool GetAccumulatorValue::has_combiner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAccumulatorValue::set_has_combiner() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAccumulatorValue::clear_has_combiner() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAccumulatorValue::clear_combiner() {
  if (combiner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combiner_->clear();
  }
  clear_has_combiner();
}
inline const ::std::string& GetAccumulatorValue::combiner() const {
  // @@protoc_insertion_point(field_get:orion.bosen.task.GetAccumulatorValue.combiner)
  return *combiner_;
}
inline void GetAccumulatorValue::set_combiner(const ::std::string& value) {
  set_has_combiner();
  if (combiner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combiner_ = new ::std::string;
  }
  combiner_->assign(value);
  // @@protoc_insertion_point(field_set:orion.bosen.task.GetAccumulatorValue.combiner)
}
inline void GetAccumulatorValue::set_combiner(const char* value) {
  set_has_combiner();
  if (combiner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combiner_ = new ::std::string;
  }
  combiner_->assign(value);
  // @@protoc_insertion_point(field_set_char:orion.bosen.task.GetAccumulatorValue.combiner)
}
inline void GetAccumulatorValue::set_combiner(const char* value, size_t size) {
  set_has_combiner();
  if (combiner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combiner_ = new ::std::string;
  }
  combiner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:orion.bosen.task.GetAccumulatorValue.combiner)
}
inline ::std::string* GetAccumulatorValue::mutable_combiner() {
  set_has_combiner();
  if (combiner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combiner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:orion.bosen.task.GetAccumulatorValue.combiner)
  return combiner_;
}
inline ::std::string* GetAccumulatorValue::release_combiner() {
  clear_has_combiner();
  if (combiner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = combiner_;
    combiner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetAccumulatorValue::set_allocated_combiner(::std::string* combiner) {
  if (combiner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combiner_;
  }
  if (combiner) {
    set_has_combiner();
    combiner_ = combiner;
  } else {
    clear_has_combiner();
    combiner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:orion.bosen.task.GetAccumulatorValue.combiner)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace bosen
}  // namespace orion

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_task_2eproto__INCLUDED

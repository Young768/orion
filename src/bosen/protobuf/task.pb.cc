// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace orion {
namespace bosen {
namespace task {

namespace {

const ::google::protobuf::Descriptor* CreateDistArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDistArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateDistArrayBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateDistArrayBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvalExpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvalExpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* RepartitionDistArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RepartitionDistArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDistArrayIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDistArrayIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDistArrayBufferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDistArrayBufferInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecForLoop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecForLoop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAccumulatorValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAccumulatorValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  CreateDistArray_descriptor_ = file->message_type(0);
  static const int CreateDistArray_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, parent_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, map_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, partition_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, flatten_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, num_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, init_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, map_func_module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, map_func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, random_init_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, serialized_value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, serialized_init_value_),
  };
  CreateDistArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDistArray_descriptor_,
      CreateDistArray::default_instance_,
      CreateDistArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDistArray));
  CreateDistArrayBuffer_descriptor_ = file->message_type(1);
  static const int CreateDistArrayBuffer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, num_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, serialized_init_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, serialized_value_type_),
  };
  CreateDistArrayBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateDistArrayBuffer_descriptor_,
      CreateDistArrayBuffer::default_instance_,
      CreateDistArrayBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateDistArrayBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateDistArrayBuffer));
  EvalExpr_descriptor_ = file->message_type(2);
  static const int EvalExpr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalExpr, serialized_expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalExpr, module_),
  };
  EvalExpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvalExpr_descriptor_,
      EvalExpr::default_instance_,
      EvalExpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalExpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvalExpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvalExpr));
  RepartitionDistArray_descriptor_ = file->message_type(3);
  static const int RepartitionDistArray_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, partition_func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, partition_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, index_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, contiguous_partitions_),
  };
  RepartitionDistArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RepartitionDistArray_descriptor_,
      RepartitionDistArray::default_instance_,
      RepartitionDistArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RepartitionDistArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RepartitionDistArray));
  UpdateDistArrayIndex_descriptor_ = file->message_type(4);
  static const int UpdateDistArrayIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDistArrayIndex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDistArrayIndex, index_type_),
  };
  UpdateDistArrayIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDistArrayIndex_descriptor_,
      UpdateDistArrayIndex::default_instance_,
      UpdateDistArrayIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDistArrayIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDistArrayIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDistArrayIndex));
  SetDistArrayBufferInfo_descriptor_ = file->message_type(5);
  static const int SetDistArrayBufferInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, dist_array_buffer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, dist_array_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, apply_buffer_func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, helper_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, helper_dist_array_buffer_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, delay_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, max_delay_),
  };
  SetDistArrayBufferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDistArrayBufferInfo_descriptor_,
      SetDistArrayBufferInfo::default_instance_,
      SetDistArrayBufferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDistArrayBufferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDistArrayBufferInfo));
  ExecForLoop_descriptor_ = file->message_type(6);
  static const int ExecForLoop_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, exec_for_loop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, iteration_space_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, parallel_scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, space_partitioned_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, time_partitioned_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, global_indexed_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, dist_array_buffer_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, written_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, accessed_dist_array_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, global_read_only_var_vals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, accumulator_var_syms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, loop_batch_func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, prefetch_batch_func_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, is_ordered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, is_repeated_),
  };
  ExecForLoop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecForLoop_descriptor_,
      ExecForLoop::default_instance_,
      ExecForLoop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecForLoop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecForLoop));
  GetAccumulatorValue_descriptor_ = file->message_type(7);
  static const int GetAccumulatorValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccumulatorValue, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccumulatorValue, combiner_),
  };
  GetAccumulatorValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAccumulatorValue_descriptor_,
      GetAccumulatorValue::default_instance_,
      GetAccumulatorValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccumulatorValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAccumulatorValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAccumulatorValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDistArray_descriptor_, &CreateDistArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateDistArrayBuffer_descriptor_, &CreateDistArrayBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvalExpr_descriptor_, &EvalExpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RepartitionDistArray_descriptor_, &RepartitionDistArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDistArrayIndex_descriptor_, &UpdateDistArrayIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDistArrayBufferInfo_descriptor_, &SetDistArrayBufferInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecForLoop_descriptor_, &ExecForLoop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAccumulatorValue_descriptor_, &GetAccumulatorValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete CreateDistArray::default_instance_;
  delete CreateDistArray_reflection_;
  delete CreateDistArrayBuffer::default_instance_;
  delete CreateDistArrayBuffer_reflection_;
  delete EvalExpr::default_instance_;
  delete EvalExpr_reflection_;
  delete RepartitionDistArray::default_instance_;
  delete RepartitionDistArray_reflection_;
  delete UpdateDistArrayIndex::default_instance_;
  delete UpdateDistArrayIndex_reflection_;
  delete SetDistArrayBufferInfo::default_instance_;
  delete SetDistArrayBufferInfo_reflection_;
  delete ExecForLoop::default_instance_;
  delete ExecForLoop_reflection_;
  delete GetAccumulatorValue::default_instance_;
  delete GetAccumulatorValue_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\020orion.bosen.task\"\216\003\n\017Creat"
    "eDistArray\022\n\n\002id\030\001 \002(\005\022\023\n\013parent_type\030\002 "
    "\002(\005\022\020\n\010map_type\030\003 \002(\005\022\030\n\020partition_schem"
    "e\030\004 \002(\005\022\027\n\017flatten_results\030\005 \002(\010\022\020\n\010num_"
    "dims\030\006 \002(\004\022\022\n\nvalue_type\030\007 \002(\005\022\021\n\tfile_p"
    "ath\030\010 \001(\t\022\021\n\tparent_id\030\t \001(\005\022\021\n\tinit_typ"
    "e\030\n \001(\005\022\027\n\017map_func_module\030\013 \001(\005\022\025\n\rmap_"
    "func_name\030\014 \001(\t\022\014\n\004dims\030\r \003(\003\022\030\n\020random_"
    "init_type\030\017 \001(\005\022\020\n\010is_dense\030\020 \002(\010\022\016\n\006sym"
    "bol\030\021 \002(\t\022\035\n\025serialized_value_type\030\022 \002(\014"
    "\022\035\n\025serialized_init_value\030\023 \001(\014\"\267\001\n\025Crea"
    "teDistArrayBuffer\022\n\n\002id\030\001 \002(\005\022\014\n\004dims\030\002 "
    "\003(\003\022\020\n\010num_dims\030\003 \002(\004\022\020\n\010is_dense\030\004 \002(\010\022"
    "\022\n\nvalue_type\030\005 \002(\005\022\035\n\025serialized_init_v"
    "alue\030\006 \002(\014\022\016\n\006symbol\030\007 \002(\t\022\035\n\025serialized"
    "_value_type\030\010 \002(\014\"3\n\010EvalExpr\022\027\n\017seriali"
    "zed_expr\030\001 \002(\014\022\016\n\006module\030\002 \002(\005\"\214\001\n\024Repar"
    "titionDistArray\022\n\n\002id\030\001 \002(\005\022\033\n\023partition"
    "_func_name\030\002 \001(\t\022\030\n\020partition_scheme\030\003 \002"
    "(\005\022\022\n\nindex_type\030\004 \002(\005\022\035\n\025contiguous_par"
    "titions\030\005 \002(\010\"6\n\024UpdateDistArrayIndex\022\n\n"
    "\002id\030\001 \002(\005\022\022\n\nindex_type\030\002 \002(\005\"\331\001\n\026SetDis"
    "tArrayBufferInfo\022\034\n\024dist_array_buffer_id"
    "\030\001 \002(\005\022\025\n\rdist_array_id\030\002 \002(\005\022\036\n\026apply_b"
    "uffer_func_name\030\003 \002(\t\022\035\n\025helper_dist_arr"
    "ay_ids\030\004 \003(\005\022$\n\034helper_dist_array_buffer"
    "_ids\030\005 \003(\005\022\022\n\ndelay_mode\030\006 \002(\005\022\021\n\tmax_de"
    "lay\030\007 \002(\004\"\340\003\n\013ExecForLoop\022\030\n\020exec_for_lo"
    "op_id\030\001 \002(\005\022\032\n\022iteration_space_id\030\002 \002(\005\022"
    "\027\n\017parallel_scheme\030\003 \002(\005\022(\n space_partit"
    "ioned_dist_array_ids\030\004 \003(\005\022\'\n\037time_parti"
    "tioned_dist_array_ids\030\005 \003(\005\022%\n\035global_in"
    "dexed_dist_array_ids\030\006 \003(\005\022\035\n\025dist_array"
    "_buffer_ids\030\007 \003(\005\022\036\n\026written_dist_array_"
    "ids\030\010 \003(\005\022\037\n\027accessed_dist_array_ids\030\t \003"
    "(\005\022!\n\031global_read_only_var_vals\030\n \003(\014\022\034\n"
    "\024accumulator_var_syms\030\013 \003(\t\022\034\n\024loop_batc"
    "h_func_name\030\014 \002(\t\022 \n\030prefetch_batch_func"
    "_name\030\r \001(\t\022\022\n\nis_ordered\030\016 \002(\010\022\023\n\013is_re"
    "peated\030\017 \002(\010\"7\n\023GetAccumulatorValue\022\016\n\006s"
    "ymbol\030\001 \002(\t\022\020\n\010combiner\030\002 \002(\t", 1629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  CreateDistArray::default_instance_ = new CreateDistArray();
  CreateDistArrayBuffer::default_instance_ = new CreateDistArrayBuffer();
  EvalExpr::default_instance_ = new EvalExpr();
  RepartitionDistArray::default_instance_ = new RepartitionDistArray();
  UpdateDistArrayIndex::default_instance_ = new UpdateDistArrayIndex();
  SetDistArrayBufferInfo::default_instance_ = new SetDistArrayBufferInfo();
  ExecForLoop::default_instance_ = new ExecForLoop();
  GetAccumulatorValue::default_instance_ = new GetAccumulatorValue();
  CreateDistArray::default_instance_->InitAsDefaultInstance();
  CreateDistArrayBuffer::default_instance_->InitAsDefaultInstance();
  EvalExpr::default_instance_->InitAsDefaultInstance();
  RepartitionDistArray::default_instance_->InitAsDefaultInstance();
  UpdateDistArrayIndex::default_instance_->InitAsDefaultInstance();
  SetDistArrayBufferInfo::default_instance_->InitAsDefaultInstance();
  ExecForLoop::default_instance_->InitAsDefaultInstance();
  GetAccumulatorValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateDistArray::kIdFieldNumber;
const int CreateDistArray::kParentTypeFieldNumber;
const int CreateDistArray::kMapTypeFieldNumber;
const int CreateDistArray::kPartitionSchemeFieldNumber;
const int CreateDistArray::kFlattenResultsFieldNumber;
const int CreateDistArray::kNumDimsFieldNumber;
const int CreateDistArray::kValueTypeFieldNumber;
const int CreateDistArray::kFilePathFieldNumber;
const int CreateDistArray::kParentIdFieldNumber;
const int CreateDistArray::kInitTypeFieldNumber;
const int CreateDistArray::kMapFuncModuleFieldNumber;
const int CreateDistArray::kMapFuncNameFieldNumber;
const int CreateDistArray::kDimsFieldNumber;
const int CreateDistArray::kRandomInitTypeFieldNumber;
const int CreateDistArray::kIsDenseFieldNumber;
const int CreateDistArray::kSymbolFieldNumber;
const int CreateDistArray::kSerializedValueTypeFieldNumber;
const int CreateDistArray::kSerializedInitValueFieldNumber;
#endif  // !_MSC_VER

CreateDistArray::CreateDistArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.CreateDistArray)
}

void CreateDistArray::InitAsDefaultInstance() {
}

CreateDistArray::CreateDistArray(const CreateDistArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.CreateDistArray)
}

void CreateDistArray::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  parent_type_ = 0;
  map_type_ = 0;
  partition_scheme_ = 0;
  flatten_results_ = false;
  num_dims_ = GOOGLE_ULONGLONG(0);
  value_type_ = 0;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_id_ = 0;
  init_type_ = 0;
  map_func_module_ = 0;
  map_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  random_init_type_ = 0;
  is_dense_ = false;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDistArray::~CreateDistArray() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.CreateDistArray)
  SharedDtor();
}

void CreateDistArray::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (map_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete map_func_name_;
  }
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_value_type_;
  }
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_init_value_;
  }
  if (this != default_instance_) {
  }
}

void CreateDistArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDistArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDistArray_descriptor_;
}

const CreateDistArray& CreateDistArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

CreateDistArray* CreateDistArray::default_instance_ = NULL;

CreateDistArray* CreateDistArray::New() const {
  return new CreateDistArray;
}

void CreateDistArray::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateDistArray*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, num_dims_);
    flatten_results_ = false;
    value_type_ = 0;
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_path_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(parent_id_, init_type_);
    ZR_(map_func_module_, random_init_type_);
    if (has_map_func_name()) {
      if (map_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        map_func_name_->clear();
      }
    }
    is_dense_ = false;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_serialized_value_type()) {
      if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_value_type_->clear();
      }
    }
    if (has_serialized_init_value()) {
      if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_init_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDistArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.CreateDistArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_parent_type;
        break;
      }

      // required int32 parent_type = 2;
      case 2: {
        if (tag == 16) {
         parse_parent_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_type_)));
          set_has_parent_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_map_type;
        break;
      }

      // required int32 map_type = 3;
      case 3: {
        if (tag == 24) {
         parse_map_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_type_)));
          set_has_map_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_partition_scheme;
        break;
      }

      // required int32 partition_scheme = 4;
      case 4: {
        if (tag == 32) {
         parse_partition_scheme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_scheme_)));
          set_has_partition_scheme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flatten_results;
        break;
      }

      // required bool flatten_results = 5;
      case 5: {
        if (tag == 40) {
         parse_flatten_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flatten_results_)));
          set_has_flatten_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_dims;
        break;
      }

      // required uint64 num_dims = 6;
      case 6: {
        if (tag == 48) {
         parse_num_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_dims_)));
          set_has_num_dims();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_value_type;
        break;
      }

      // required int32 value_type = 7;
      case 7: {
        if (tag == 56) {
         parse_value_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_type_)));
          set_has_value_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_file_path;
        break;
      }

      // optional string file_path = 8;
      case 8: {
        if (tag == 66) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_parent_id;
        break;
      }

      // optional int32 parent_id = 9;
      case 9: {
        if (tag == 72) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_init_type;
        break;
      }

      // optional int32 init_type = 10;
      case 10: {
        if (tag == 80) {
         parse_init_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_type_)));
          set_has_init_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_map_func_module;
        break;
      }

      // optional int32 map_func_module = 11;
      case 11: {
        if (tag == 88) {
         parse_map_func_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_func_module_)));
          set_has_map_func_module();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_map_func_name;
        break;
      }

      // optional string map_func_name = 12;
      case 12: {
        if (tag == 98) {
         parse_map_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_func_name().data(), this->map_func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "map_func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dims;
        break;
      }

      // repeated int64 dims = 13;
      case 13: {
        if (tag == 104) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 104, input, this->mutable_dims())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_dims;
        if (input->ExpectTag(120)) goto parse_random_init_type;
        break;
      }

      // optional int32 random_init_type = 15;
      case 15: {
        if (tag == 120) {
         parse_random_init_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_init_type_)));
          set_has_random_init_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_is_dense;
        break;
      }

      // required bool is_dense = 16;
      case 16: {
        if (tag == 128) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_symbol;
        break;
      }

      // required string symbol = 17;
      case 17: {
        if (tag == 138) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_serialized_value_type;
        break;
      }

      // required bytes serialized_value_type = 18;
      case 18: {
        if (tag == 146) {
         parse_serialized_value_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_value_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_serialized_init_value;
        break;
      }

      // optional bytes serialized_init_value = 19;
      case 19: {
        if (tag == 154) {
         parse_serialized_init_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_init_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.CreateDistArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.CreateDistArray)
  return false;
#undef DO_
}

void CreateDistArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.CreateDistArray)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 parent_type = 2;
  if (has_parent_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_type(), output);
  }

  // required int32 map_type = 3;
  if (has_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->map_type(), output);
  }

  // required int32 partition_scheme = 4;
  if (has_partition_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partition_scheme(), output);
  }

  // required bool flatten_results = 5;
  if (has_flatten_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flatten_results(), output);
  }

  // required uint64 num_dims = 6;
  if (has_num_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->num_dims(), output);
  }

  // required int32 value_type = 7;
  if (has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->value_type(), output);
  }

  // optional string file_path = 8;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->file_path(), output);
  }

  // optional int32 parent_id = 9;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->parent_id(), output);
  }

  // optional int32 init_type = 10;
  if (has_init_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->init_type(), output);
  }

  // optional int32 map_func_module = 11;
  if (has_map_func_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->map_func_module(), output);
  }

  // optional string map_func_name = 12;
  if (has_map_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_func_name().data(), this->map_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->map_func_name(), output);
  }

  // repeated int64 dims = 13;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      13, this->dims(i), output);
  }

  // optional int32 random_init_type = 15;
  if (has_random_init_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->random_init_type(), output);
  }

  // required bool is_dense = 16;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_dense(), output);
  }

  // required string symbol = 17;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->symbol(), output);
  }

  // required bytes serialized_value_type = 18;
  if (has_serialized_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->serialized_value_type(), output);
  }

  // optional bytes serialized_init_value = 19;
  if (has_serialized_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->serialized_init_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.CreateDistArray)
}

::google::protobuf::uint8* CreateDistArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.CreateDistArray)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 parent_type = 2;
  if (has_parent_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_type(), target);
  }

  // required int32 map_type = 3;
  if (has_map_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->map_type(), target);
  }

  // required int32 partition_scheme = 4;
  if (has_partition_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partition_scheme(), target);
  }

  // required bool flatten_results = 5;
  if (has_flatten_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flatten_results(), target);
  }

  // required uint64 num_dims = 6;
  if (has_num_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->num_dims(), target);
  }

  // required int32 value_type = 7;
  if (has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->value_type(), target);
  }

  // optional string file_path = 8;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->file_path(), target);
  }

  // optional int32 parent_id = 9;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->parent_id(), target);
  }

  // optional int32 init_type = 10;
  if (has_init_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->init_type(), target);
  }

  // optional int32 map_func_module = 11;
  if (has_map_func_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->map_func_module(), target);
  }

  // optional string map_func_name = 12;
  if (has_map_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_func_name().data(), this->map_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "map_func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->map_func_name(), target);
  }

  // repeated int64 dims = 13;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(13, this->dims(i), target);
  }

  // optional int32 random_init_type = 15;
  if (has_random_init_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->random_init_type(), target);
  }

  // required bool is_dense = 16;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_dense(), target);
  }

  // required string symbol = 17;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->symbol(), target);
  }

  // required bytes serialized_value_type = 18;
  if (has_serialized_value_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->serialized_value_type(), target);
  }

  // optional bytes serialized_init_value = 19;
  if (has_serialized_init_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->serialized_init_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.CreateDistArray)
  return target;
}

int CreateDistArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 parent_type = 2;
    if (has_parent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_type());
    }

    // required int32 map_type = 3;
    if (has_map_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_type());
    }

    // required int32 partition_scheme = 4;
    if (has_partition_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_scheme());
    }

    // required bool flatten_results = 5;
    if (has_flatten_results()) {
      total_size += 1 + 1;
    }

    // required uint64 num_dims = 6;
    if (has_num_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_dims());
    }

    // required int32 value_type = 7;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_type());
    }

    // optional string file_path = 8;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 parent_id = 9;
    if (has_parent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent_id());
    }

    // optional int32 init_type = 10;
    if (has_init_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_type());
    }

    // optional int32 map_func_module = 11;
    if (has_map_func_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_func_module());
    }

    // optional string map_func_name = 12;
    if (has_map_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_func_name());
    }

    // optional int32 random_init_type = 15;
    if (has_random_init_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_init_type());
    }

    // required bool is_dense = 16;
    if (has_is_dense()) {
      total_size += 2 + 1;
    }

    // required string symbol = 17;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required bytes serialized_value_type = 18;
    if (has_serialized_value_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_value_type());
    }

    // optional bytes serialized_init_value = 19;
    if (has_serialized_init_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_init_value());
    }

  }
  // repeated int64 dims = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDistArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDistArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDistArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDistArray::MergeFrom(const CreateDistArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent_type()) {
      set_parent_type(from.parent_type());
    }
    if (from.has_map_type()) {
      set_map_type(from.map_type());
    }
    if (from.has_partition_scheme()) {
      set_partition_scheme(from.partition_scheme());
    }
    if (from.has_flatten_results()) {
      set_flatten_results(from.flatten_results());
    }
    if (from.has_num_dims()) {
      set_num_dims(from.num_dims());
    }
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
    if (from.has_init_type()) {
      set_init_type(from.init_type());
    }
    if (from.has_map_func_module()) {
      set_map_func_module(from.map_func_module());
    }
    if (from.has_map_func_name()) {
      set_map_func_name(from.map_func_name());
    }
    if (from.has_random_init_type()) {
      set_random_init_type(from.random_init_type());
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_serialized_value_type()) {
      set_serialized_value_type(from.serialized_value_type());
    }
    if (from.has_serialized_init_value()) {
      set_serialized_init_value(from.serialized_init_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDistArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDistArray::CopyFrom(const CreateDistArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDistArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001c07f) != 0x0001c07f) return false;

  return true;
}

void CreateDistArray::Swap(CreateDistArray* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_type_, other->parent_type_);
    std::swap(map_type_, other->map_type_);
    std::swap(partition_scheme_, other->partition_scheme_);
    std::swap(flatten_results_, other->flatten_results_);
    std::swap(num_dims_, other->num_dims_);
    std::swap(value_type_, other->value_type_);
    std::swap(file_path_, other->file_path_);
    std::swap(parent_id_, other->parent_id_);
    std::swap(init_type_, other->init_type_);
    std::swap(map_func_module_, other->map_func_module_);
    std::swap(map_func_name_, other->map_func_name_);
    dims_.Swap(&other->dims_);
    std::swap(random_init_type_, other->random_init_type_);
    std::swap(is_dense_, other->is_dense_);
    std::swap(symbol_, other->symbol_);
    std::swap(serialized_value_type_, other->serialized_value_type_);
    std::swap(serialized_init_value_, other->serialized_init_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDistArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDistArray_descriptor_;
  metadata.reflection = CreateDistArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateDistArrayBuffer::kIdFieldNumber;
const int CreateDistArrayBuffer::kDimsFieldNumber;
const int CreateDistArrayBuffer::kNumDimsFieldNumber;
const int CreateDistArrayBuffer::kIsDenseFieldNumber;
const int CreateDistArrayBuffer::kValueTypeFieldNumber;
const int CreateDistArrayBuffer::kSerializedInitValueFieldNumber;
const int CreateDistArrayBuffer::kSymbolFieldNumber;
const int CreateDistArrayBuffer::kSerializedValueTypeFieldNumber;
#endif  // !_MSC_VER

CreateDistArrayBuffer::CreateDistArrayBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.CreateDistArrayBuffer)
}

void CreateDistArrayBuffer::InitAsDefaultInstance() {
}

CreateDistArrayBuffer::CreateDistArrayBuffer(const CreateDistArrayBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.CreateDistArrayBuffer)
}

void CreateDistArrayBuffer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  num_dims_ = GOOGLE_ULONGLONG(0);
  is_dense_ = false;
  value_type_ = 0;
  serialized_init_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_value_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateDistArrayBuffer::~CreateDistArrayBuffer() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.CreateDistArrayBuffer)
  SharedDtor();
}

void CreateDistArrayBuffer::SharedDtor() {
  if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_init_value_;
  }
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_value_type_;
  }
  if (this != default_instance_) {
  }
}

void CreateDistArrayBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateDistArrayBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateDistArrayBuffer_descriptor_;
}

const CreateDistArrayBuffer& CreateDistArrayBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

CreateDistArrayBuffer* CreateDistArrayBuffer::default_instance_ = NULL;

CreateDistArrayBuffer* CreateDistArrayBuffer::New() const {
  return new CreateDistArrayBuffer;
}

void CreateDistArrayBuffer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateDistArrayBuffer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(id_, num_dims_);
    value_type_ = 0;
    if (has_serialized_init_value()) {
      if (serialized_init_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_init_value_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_serialized_value_type()) {
      if (serialized_value_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_value_type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateDistArrayBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.CreateDistArrayBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dims;
        break;
      }

      // repeated int64 dims = 2;
      case 2: {
        if (tag == 16) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_dims())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dims;
        if (input->ExpectTag(24)) goto parse_num_dims;
        break;
      }

      // required uint64 num_dims = 3;
      case 3: {
        if (tag == 24) {
         parse_num_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_dims_)));
          set_has_num_dims();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_dense;
        break;
      }

      // required bool is_dense = 4;
      case 4: {
        if (tag == 32) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value_type;
        break;
      }

      // required int32 value_type = 5;
      case 5: {
        if (tag == 40) {
         parse_value_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_type_)));
          set_has_value_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serialized_init_value;
        break;
      }

      // required bytes serialized_init_value = 6;
      case 6: {
        if (tag == 50) {
         parse_serialized_init_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_init_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_symbol;
        break;
      }

      // required string symbol = 7;
      case 7: {
        if (tag == 58) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_serialized_value_type;
        break;
      }

      // required bytes serialized_value_type = 8;
      case 8: {
        if (tag == 66) {
         parse_serialized_value_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_value_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.CreateDistArrayBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.CreateDistArrayBuffer)
  return false;
#undef DO_
}

void CreateDistArrayBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.CreateDistArrayBuffer)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int64 dims = 2;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->dims(i), output);
  }

  // required uint64 num_dims = 3;
  if (has_num_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->num_dims(), output);
  }

  // required bool is_dense = 4;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dense(), output);
  }

  // required int32 value_type = 5;
  if (has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value_type(), output);
  }

  // required bytes serialized_init_value = 6;
  if (has_serialized_init_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->serialized_init_value(), output);
  }

  // required string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->symbol(), output);
  }

  // required bytes serialized_value_type = 8;
  if (has_serialized_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->serialized_value_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.CreateDistArrayBuffer)
}

::google::protobuf::uint8* CreateDistArrayBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.CreateDistArrayBuffer)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int64 dims = 2;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->dims(i), target);
  }

  // required uint64 num_dims = 3;
  if (has_num_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->num_dims(), target);
  }

  // required bool is_dense = 4;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dense(), target);
  }

  // required int32 value_type = 5;
  if (has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value_type(), target);
  }

  // required bytes serialized_init_value = 6;
  if (has_serialized_init_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->serialized_init_value(), target);
  }

  // required string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol(), target);
  }

  // required bytes serialized_value_type = 8;
  if (has_serialized_value_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->serialized_value_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.CreateDistArrayBuffer)
  return target;
}

int CreateDistArrayBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required uint64 num_dims = 3;
    if (has_num_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_dims());
    }

    // required bool is_dense = 4;
    if (has_is_dense()) {
      total_size += 1 + 1;
    }

    // required int32 value_type = 5;
    if (has_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_type());
    }

    // required bytes serialized_init_value = 6;
    if (has_serialized_init_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_init_value());
    }

    // required string symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required bytes serialized_value_type = 8;
    if (has_serialized_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_value_type());
    }

  }
  // repeated int64 dims = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDistArrayBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateDistArrayBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateDistArrayBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateDistArrayBuffer::MergeFrom(const CreateDistArrayBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num_dims()) {
      set_num_dims(from.num_dims());
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
    if (from.has_value_type()) {
      set_value_type(from.value_type());
    }
    if (from.has_serialized_init_value()) {
      set_serialized_init_value(from.serialized_init_value());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_serialized_value_type()) {
      set_serialized_value_type(from.serialized_value_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateDistArrayBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateDistArrayBuffer::CopyFrom(const CreateDistArrayBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDistArrayBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fd) != 0x000000fd) return false;

  return true;
}

void CreateDistArrayBuffer::Swap(CreateDistArrayBuffer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    dims_.Swap(&other->dims_);
    std::swap(num_dims_, other->num_dims_);
    std::swap(is_dense_, other->is_dense_);
    std::swap(value_type_, other->value_type_);
    std::swap(serialized_init_value_, other->serialized_init_value_);
    std::swap(symbol_, other->symbol_);
    std::swap(serialized_value_type_, other->serialized_value_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateDistArrayBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateDistArrayBuffer_descriptor_;
  metadata.reflection = CreateDistArrayBuffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvalExpr::kSerializedExprFieldNumber;
const int EvalExpr::kModuleFieldNumber;
#endif  // !_MSC_VER

EvalExpr::EvalExpr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.EvalExpr)
}

void EvalExpr::InitAsDefaultInstance() {
}

EvalExpr::EvalExpr(const EvalExpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.EvalExpr)
}

void EvalExpr::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serialized_expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  module_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvalExpr::~EvalExpr() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.EvalExpr)
  SharedDtor();
}

void EvalExpr::SharedDtor() {
  if (serialized_expr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serialized_expr_;
  }
  if (this != default_instance_) {
  }
}

void EvalExpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvalExpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvalExpr_descriptor_;
}

const EvalExpr& EvalExpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

EvalExpr* EvalExpr::default_instance_ = NULL;

EvalExpr* EvalExpr::New() const {
  return new EvalExpr;
}

void EvalExpr::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serialized_expr()) {
      if (serialized_expr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serialized_expr_->clear();
      }
    }
    module_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvalExpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.EvalExpr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialized_expr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_expr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_module;
        break;
      }

      // required int32 module = 2;
      case 2: {
        if (tag == 16) {
         parse_module:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          set_has_module();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.EvalExpr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.EvalExpr)
  return false;
#undef DO_
}

void EvalExpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.EvalExpr)
  // required bytes serialized_expr = 1;
  if (has_serialized_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_expr(), output);
  }

  // required int32 module = 2;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->module(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.EvalExpr)
}

::google::protobuf::uint8* EvalExpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.EvalExpr)
  // required bytes serialized_expr = 1;
  if (has_serialized_expr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_expr(), target);
  }

  // required int32 module = 2;
  if (has_module()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->module(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.EvalExpr)
  return target;
}

int EvalExpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialized_expr = 1;
    if (has_serialized_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_expr());
    }

    // required int32 module = 2;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvalExpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvalExpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvalExpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvalExpr::MergeFrom(const EvalExpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_expr()) {
      set_serialized_expr(from.serialized_expr());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvalExpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvalExpr::CopyFrom(const EvalExpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvalExpr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EvalExpr::Swap(EvalExpr* other) {
  if (other != this) {
    std::swap(serialized_expr_, other->serialized_expr_);
    std::swap(module_, other->module_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvalExpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvalExpr_descriptor_;
  metadata.reflection = EvalExpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RepartitionDistArray::kIdFieldNumber;
const int RepartitionDistArray::kPartitionFuncNameFieldNumber;
const int RepartitionDistArray::kPartitionSchemeFieldNumber;
const int RepartitionDistArray::kIndexTypeFieldNumber;
const int RepartitionDistArray::kContiguousPartitionsFieldNumber;
#endif  // !_MSC_VER

RepartitionDistArray::RepartitionDistArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.RepartitionDistArray)
}

void RepartitionDistArray::InitAsDefaultInstance() {
}

RepartitionDistArray::RepartitionDistArray(const RepartitionDistArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.RepartitionDistArray)
}

void RepartitionDistArray::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  partition_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  partition_scheme_ = 0;
  index_type_ = 0;
  contiguous_partitions_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RepartitionDistArray::~RepartitionDistArray() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.RepartitionDistArray)
  SharedDtor();
}

void RepartitionDistArray::SharedDtor() {
  if (partition_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partition_func_name_;
  }
  if (this != default_instance_) {
  }
}

void RepartitionDistArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RepartitionDistArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RepartitionDistArray_descriptor_;
}

const RepartitionDistArray& RepartitionDistArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

RepartitionDistArray* RepartitionDistArray::default_instance_ = NULL;

RepartitionDistArray* RepartitionDistArray::New() const {
  return new RepartitionDistArray;
}

void RepartitionDistArray::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RepartitionDistArray*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, contiguous_partitions_);
    if (has_partition_func_name()) {
      if (partition_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        partition_func_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RepartitionDistArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.RepartitionDistArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partition_func_name;
        break;
      }

      // optional string partition_func_name = 2;
      case 2: {
        if (tag == 18) {
         parse_partition_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partition_func_name().data(), this->partition_func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "partition_func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_partition_scheme;
        break;
      }

      // required int32 partition_scheme = 3;
      case 3: {
        if (tag == 24) {
         parse_partition_scheme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_scheme_)));
          set_has_partition_scheme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index_type;
        break;
      }

      // required int32 index_type = 4;
      case 4: {
        if (tag == 32) {
         parse_index_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_type_)));
          set_has_index_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_contiguous_partitions;
        break;
      }

      // required bool contiguous_partitions = 5;
      case 5: {
        if (tag == 40) {
         parse_contiguous_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contiguous_partitions_)));
          set_has_contiguous_partitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.RepartitionDistArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.RepartitionDistArray)
  return false;
#undef DO_
}

void RepartitionDistArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.RepartitionDistArray)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string partition_func_name = 2;
  if (has_partition_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partition_func_name().data(), this->partition_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partition_func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->partition_func_name(), output);
  }

  // required int32 partition_scheme = 3;
  if (has_partition_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition_scheme(), output);
  }

  // required int32 index_type = 4;
  if (has_index_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_type(), output);
  }

  // required bool contiguous_partitions = 5;
  if (has_contiguous_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->contiguous_partitions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.RepartitionDistArray)
}

::google::protobuf::uint8* RepartitionDistArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.RepartitionDistArray)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string partition_func_name = 2;
  if (has_partition_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partition_func_name().data(), this->partition_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "partition_func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->partition_func_name(), target);
  }

  // required int32 partition_scheme = 3;
  if (has_partition_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition_scheme(), target);
  }

  // required int32 index_type = 4;
  if (has_index_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_type(), target);
  }

  // required bool contiguous_partitions = 5;
  if (has_contiguous_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->contiguous_partitions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.RepartitionDistArray)
  return target;
}

int RepartitionDistArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string partition_func_name = 2;
    if (has_partition_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->partition_func_name());
    }

    // required int32 partition_scheme = 3;
    if (has_partition_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partition_scheme());
    }

    // required int32 index_type = 4;
    if (has_index_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_type());
    }

    // required bool contiguous_partitions = 5;
    if (has_contiguous_partitions()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RepartitionDistArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RepartitionDistArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RepartitionDistArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RepartitionDistArray::MergeFrom(const RepartitionDistArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_partition_func_name()) {
      set_partition_func_name(from.partition_func_name());
    }
    if (from.has_partition_scheme()) {
      set_partition_scheme(from.partition_scheme());
    }
    if (from.has_index_type()) {
      set_index_type(from.index_type());
    }
    if (from.has_contiguous_partitions()) {
      set_contiguous_partitions(from.contiguous_partitions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RepartitionDistArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RepartitionDistArray::CopyFrom(const RepartitionDistArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepartitionDistArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void RepartitionDistArray::Swap(RepartitionDistArray* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(partition_func_name_, other->partition_func_name_);
    std::swap(partition_scheme_, other->partition_scheme_);
    std::swap(index_type_, other->index_type_);
    std::swap(contiguous_partitions_, other->contiguous_partitions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RepartitionDistArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RepartitionDistArray_descriptor_;
  metadata.reflection = RepartitionDistArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDistArrayIndex::kIdFieldNumber;
const int UpdateDistArrayIndex::kIndexTypeFieldNumber;
#endif  // !_MSC_VER

UpdateDistArrayIndex::UpdateDistArrayIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.UpdateDistArrayIndex)
}

void UpdateDistArrayIndex::InitAsDefaultInstance() {
}

UpdateDistArrayIndex::UpdateDistArrayIndex(const UpdateDistArrayIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.UpdateDistArrayIndex)
}

void UpdateDistArrayIndex::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  index_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDistArrayIndex::~UpdateDistArrayIndex() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.UpdateDistArrayIndex)
  SharedDtor();
}

void UpdateDistArrayIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDistArrayIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDistArrayIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDistArrayIndex_descriptor_;
}

const UpdateDistArrayIndex& UpdateDistArrayIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

UpdateDistArrayIndex* UpdateDistArrayIndex::default_instance_ = NULL;

UpdateDistArrayIndex* UpdateDistArrayIndex::New() const {
  return new UpdateDistArrayIndex;
}

void UpdateDistArrayIndex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateDistArrayIndex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, index_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDistArrayIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.UpdateDistArrayIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index_type;
        break;
      }

      // required int32 index_type = 2;
      case 2: {
        if (tag == 16) {
         parse_index_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_type_)));
          set_has_index_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.UpdateDistArrayIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.UpdateDistArrayIndex)
  return false;
#undef DO_
}

void UpdateDistArrayIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.UpdateDistArrayIndex)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 index_type = 2;
  if (has_index_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.UpdateDistArrayIndex)
}

::google::protobuf::uint8* UpdateDistArrayIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.UpdateDistArrayIndex)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 index_type = 2;
  if (has_index_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.UpdateDistArrayIndex)
  return target;
}

int UpdateDistArrayIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 index_type = 2;
    if (has_index_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDistArrayIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDistArrayIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDistArrayIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDistArrayIndex::MergeFrom(const UpdateDistArrayIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index_type()) {
      set_index_type(from.index_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDistArrayIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDistArrayIndex::CopyFrom(const UpdateDistArrayIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDistArrayIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateDistArrayIndex::Swap(UpdateDistArrayIndex* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_type_, other->index_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDistArrayIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDistArrayIndex_descriptor_;
  metadata.reflection = UpdateDistArrayIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDistArrayBufferInfo::kDistArrayBufferIdFieldNumber;
const int SetDistArrayBufferInfo::kDistArrayIdFieldNumber;
const int SetDistArrayBufferInfo::kApplyBufferFuncNameFieldNumber;
const int SetDistArrayBufferInfo::kHelperDistArrayIdsFieldNumber;
const int SetDistArrayBufferInfo::kHelperDistArrayBufferIdsFieldNumber;
const int SetDistArrayBufferInfo::kDelayModeFieldNumber;
const int SetDistArrayBufferInfo::kMaxDelayFieldNumber;
#endif  // !_MSC_VER

SetDistArrayBufferInfo::SetDistArrayBufferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.SetDistArrayBufferInfo)
}

void SetDistArrayBufferInfo::InitAsDefaultInstance() {
}

SetDistArrayBufferInfo::SetDistArrayBufferInfo(const SetDistArrayBufferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.SetDistArrayBufferInfo)
}

void SetDistArrayBufferInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dist_array_buffer_id_ = 0;
  dist_array_id_ = 0;
  apply_buffer_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_mode_ = 0;
  max_delay_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDistArrayBufferInfo::~SetDistArrayBufferInfo() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.SetDistArrayBufferInfo)
  SharedDtor();
}

void SetDistArrayBufferInfo::SharedDtor() {
  if (apply_buffer_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete apply_buffer_func_name_;
  }
  if (this != default_instance_) {
  }
}

void SetDistArrayBufferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDistArrayBufferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDistArrayBufferInfo_descriptor_;
}

const SetDistArrayBufferInfo& SetDistArrayBufferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

SetDistArrayBufferInfo* SetDistArrayBufferInfo::default_instance_ = NULL;

SetDistArrayBufferInfo* SetDistArrayBufferInfo::New() const {
  return new SetDistArrayBufferInfo;
}

void SetDistArrayBufferInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetDistArrayBufferInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 103) {
    ZR_(dist_array_buffer_id_, dist_array_id_);
    ZR_(max_delay_, delay_mode_);
    if (has_apply_buffer_func_name()) {
      if (apply_buffer_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        apply_buffer_func_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  helper_dist_array_ids_.Clear();
  helper_dist_array_buffer_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDistArrayBufferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.SetDistArrayBufferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dist_array_buffer_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dist_array_buffer_id_)));
          set_has_dist_array_buffer_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dist_array_id;
        break;
      }

      // required int32 dist_array_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dist_array_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dist_array_id_)));
          set_has_dist_array_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_apply_buffer_func_name;
        break;
      }

      // required string apply_buffer_func_name = 3;
      case 3: {
        if (tag == 26) {
         parse_apply_buffer_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apply_buffer_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apply_buffer_func_name().data(), this->apply_buffer_func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apply_buffer_func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_helper_dist_array_ids;
        break;
      }

      // repeated int32 helper_dist_array_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_helper_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_helper_dist_array_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_helper_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_helper_dist_array_ids;
        if (input->ExpectTag(40)) goto parse_helper_dist_array_buffer_ids;
        break;
      }

      // repeated int32 helper_dist_array_buffer_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_helper_dist_array_buffer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_helper_dist_array_buffer_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_helper_dist_array_buffer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_helper_dist_array_buffer_ids;
        if (input->ExpectTag(48)) goto parse_delay_mode;
        break;
      }

      // required int32 delay_mode = 6;
      case 6: {
        if (tag == 48) {
         parse_delay_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_mode_)));
          set_has_delay_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_delay;
        break;
      }

      // required uint64 max_delay = 7;
      case 7: {
        if (tag == 56) {
         parse_max_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_delay_)));
          set_has_max_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.SetDistArrayBufferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.SetDistArrayBufferInfo)
  return false;
#undef DO_
}

void SetDistArrayBufferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.SetDistArrayBufferInfo)
  // required int32 dist_array_buffer_id = 1;
  if (has_dist_array_buffer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dist_array_buffer_id(), output);
  }

  // required int32 dist_array_id = 2;
  if (has_dist_array_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dist_array_id(), output);
  }

  // required string apply_buffer_func_name = 3;
  if (has_apply_buffer_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apply_buffer_func_name().data(), this->apply_buffer_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apply_buffer_func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->apply_buffer_func_name(), output);
  }

  // repeated int32 helper_dist_array_ids = 4;
  for (int i = 0; i < this->helper_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->helper_dist_array_ids(i), output);
  }

  // repeated int32 helper_dist_array_buffer_ids = 5;
  for (int i = 0; i < this->helper_dist_array_buffer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->helper_dist_array_buffer_ids(i), output);
  }

  // required int32 delay_mode = 6;
  if (has_delay_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delay_mode(), output);
  }

  // required uint64 max_delay = 7;
  if (has_max_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->max_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.SetDistArrayBufferInfo)
}

::google::protobuf::uint8* SetDistArrayBufferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.SetDistArrayBufferInfo)
  // required int32 dist_array_buffer_id = 1;
  if (has_dist_array_buffer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dist_array_buffer_id(), target);
  }

  // required int32 dist_array_id = 2;
  if (has_dist_array_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dist_array_id(), target);
  }

  // required string apply_buffer_func_name = 3;
  if (has_apply_buffer_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apply_buffer_func_name().data(), this->apply_buffer_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apply_buffer_func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->apply_buffer_func_name(), target);
  }

  // repeated int32 helper_dist_array_ids = 4;
  for (int i = 0; i < this->helper_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->helper_dist_array_ids(i), target);
  }

  // repeated int32 helper_dist_array_buffer_ids = 5;
  for (int i = 0; i < this->helper_dist_array_buffer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->helper_dist_array_buffer_ids(i), target);
  }

  // required int32 delay_mode = 6;
  if (has_delay_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delay_mode(), target);
  }

  // required uint64 max_delay = 7;
  if (has_max_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->max_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.SetDistArrayBufferInfo)
  return target;
}

int SetDistArrayBufferInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dist_array_buffer_id = 1;
    if (has_dist_array_buffer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dist_array_buffer_id());
    }

    // required int32 dist_array_id = 2;
    if (has_dist_array_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dist_array_id());
    }

    // required string apply_buffer_func_name = 3;
    if (has_apply_buffer_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apply_buffer_func_name());
    }

    // required int32 delay_mode = 6;
    if (has_delay_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_mode());
    }

    // required uint64 max_delay = 7;
    if (has_max_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_delay());
    }

  }
  // repeated int32 helper_dist_array_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->helper_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->helper_dist_array_ids(i));
    }
    total_size += 1 * this->helper_dist_array_ids_size() + data_size;
  }

  // repeated int32 helper_dist_array_buffer_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->helper_dist_array_buffer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->helper_dist_array_buffer_ids(i));
    }
    total_size += 1 * this->helper_dist_array_buffer_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDistArrayBufferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDistArrayBufferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDistArrayBufferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDistArrayBufferInfo::MergeFrom(const SetDistArrayBufferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  helper_dist_array_ids_.MergeFrom(from.helper_dist_array_ids_);
  helper_dist_array_buffer_ids_.MergeFrom(from.helper_dist_array_buffer_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dist_array_buffer_id()) {
      set_dist_array_buffer_id(from.dist_array_buffer_id());
    }
    if (from.has_dist_array_id()) {
      set_dist_array_id(from.dist_array_id());
    }
    if (from.has_apply_buffer_func_name()) {
      set_apply_buffer_func_name(from.apply_buffer_func_name());
    }
    if (from.has_delay_mode()) {
      set_delay_mode(from.delay_mode());
    }
    if (from.has_max_delay()) {
      set_max_delay(from.max_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDistArrayBufferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDistArrayBufferInfo::CopyFrom(const SetDistArrayBufferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDistArrayBufferInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;

  return true;
}

void SetDistArrayBufferInfo::Swap(SetDistArrayBufferInfo* other) {
  if (other != this) {
    std::swap(dist_array_buffer_id_, other->dist_array_buffer_id_);
    std::swap(dist_array_id_, other->dist_array_id_);
    std::swap(apply_buffer_func_name_, other->apply_buffer_func_name_);
    helper_dist_array_ids_.Swap(&other->helper_dist_array_ids_);
    helper_dist_array_buffer_ids_.Swap(&other->helper_dist_array_buffer_ids_);
    std::swap(delay_mode_, other->delay_mode_);
    std::swap(max_delay_, other->max_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDistArrayBufferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDistArrayBufferInfo_descriptor_;
  metadata.reflection = SetDistArrayBufferInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecForLoop::kExecForLoopIdFieldNumber;
const int ExecForLoop::kIterationSpaceIdFieldNumber;
const int ExecForLoop::kParallelSchemeFieldNumber;
const int ExecForLoop::kSpacePartitionedDistArrayIdsFieldNumber;
const int ExecForLoop::kTimePartitionedDistArrayIdsFieldNumber;
const int ExecForLoop::kGlobalIndexedDistArrayIdsFieldNumber;
const int ExecForLoop::kDistArrayBufferIdsFieldNumber;
const int ExecForLoop::kWrittenDistArrayIdsFieldNumber;
const int ExecForLoop::kAccessedDistArrayIdsFieldNumber;
const int ExecForLoop::kGlobalReadOnlyVarValsFieldNumber;
const int ExecForLoop::kAccumulatorVarSymsFieldNumber;
const int ExecForLoop::kLoopBatchFuncNameFieldNumber;
const int ExecForLoop::kPrefetchBatchFuncNameFieldNumber;
const int ExecForLoop::kIsOrderedFieldNumber;
const int ExecForLoop::kIsRepeatedFieldNumber;
#endif  // !_MSC_VER

ExecForLoop::ExecForLoop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.ExecForLoop)
}

void ExecForLoop::InitAsDefaultInstance() {
}

ExecForLoop::ExecForLoop(const ExecForLoop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.ExecForLoop)
}

void ExecForLoop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  exec_for_loop_id_ = 0;
  iteration_space_id_ = 0;
  parallel_scheme_ = 0;
  loop_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefetch_batch_func_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_ordered_ = false;
  is_repeated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecForLoop::~ExecForLoop() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.ExecForLoop)
  SharedDtor();
}

void ExecForLoop::SharedDtor() {
  if (loop_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loop_batch_func_name_;
  }
  if (prefetch_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefetch_batch_func_name_;
  }
  if (this != default_instance_) {
  }
}

void ExecForLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecForLoop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecForLoop_descriptor_;
}

const ExecForLoop& ExecForLoop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

ExecForLoop* ExecForLoop::default_instance_ = NULL;

ExecForLoop* ExecForLoop::New() const {
  return new ExecForLoop;
}

void ExecForLoop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecForLoop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(exec_for_loop_id_, iteration_space_id_);
    parallel_scheme_ = 0;
  }
  if (_has_bits_[8 / 32] & 30720) {
    ZR_(is_ordered_, is_repeated_);
    if (has_loop_batch_func_name()) {
      if (loop_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loop_batch_func_name_->clear();
      }
    }
    if (has_prefetch_batch_func_name()) {
      if (prefetch_batch_func_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefetch_batch_func_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  space_partitioned_dist_array_ids_.Clear();
  time_partitioned_dist_array_ids_.Clear();
  global_indexed_dist_array_ids_.Clear();
  dist_array_buffer_ids_.Clear();
  written_dist_array_ids_.Clear();
  accessed_dist_array_ids_.Clear();
  global_read_only_var_vals_.Clear();
  accumulator_var_syms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecForLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.ExecForLoop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exec_for_loop_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exec_for_loop_id_)));
          set_has_exec_for_loop_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_iteration_space_id;
        break;
      }

      // required int32 iteration_space_id = 2;
      case 2: {
        if (tag == 16) {
         parse_iteration_space_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iteration_space_id_)));
          set_has_iteration_space_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_parallel_scheme;
        break;
      }

      // required int32 parallel_scheme = 3;
      case 3: {
        if (tag == 24) {
         parse_parallel_scheme:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parallel_scheme_)));
          set_has_parallel_scheme();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_space_partitioned_dist_array_ids;
        break;
      }

      // repeated int32 space_partitioned_dist_array_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_space_partitioned_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_space_partitioned_dist_array_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_space_partitioned_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_space_partitioned_dist_array_ids;
        if (input->ExpectTag(40)) goto parse_time_partitioned_dist_array_ids;
        break;
      }

      // repeated int32 time_partitioned_dist_array_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_time_partitioned_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_time_partitioned_dist_array_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_time_partitioned_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time_partitioned_dist_array_ids;
        if (input->ExpectTag(48)) goto parse_global_indexed_dist_array_ids;
        break;
      }

      // repeated int32 global_indexed_dist_array_ids = 6;
      case 6: {
        if (tag == 48) {
         parse_global_indexed_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_global_indexed_dist_array_ids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_global_indexed_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_global_indexed_dist_array_ids;
        if (input->ExpectTag(56)) goto parse_dist_array_buffer_ids;
        break;
      }

      // repeated int32 dist_array_buffer_ids = 7;
      case 7: {
        if (tag == 56) {
         parse_dist_array_buffer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dist_array_buffer_ids())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dist_array_buffer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dist_array_buffer_ids;
        if (input->ExpectTag(64)) goto parse_written_dist_array_ids;
        break;
      }

      // repeated int32 written_dist_array_ids = 8;
      case 8: {
        if (tag == 64) {
         parse_written_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_written_dist_array_ids())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_written_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_written_dist_array_ids;
        if (input->ExpectTag(72)) goto parse_accessed_dist_array_ids;
        break;
      }

      // repeated int32 accessed_dist_array_ids = 9;
      case 9: {
        if (tag == 72) {
         parse_accessed_dist_array_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_accessed_dist_array_ids())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_accessed_dist_array_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_accessed_dist_array_ids;
        if (input->ExpectTag(82)) goto parse_global_read_only_var_vals;
        break;
      }

      // repeated bytes global_read_only_var_vals = 10;
      case 10: {
        if (tag == 82) {
         parse_global_read_only_var_vals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_global_read_only_var_vals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_global_read_only_var_vals;
        if (input->ExpectTag(90)) goto parse_accumulator_var_syms;
        break;
      }

      // repeated string accumulator_var_syms = 11;
      case 11: {
        if (tag == 90) {
         parse_accumulator_var_syms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_accumulator_var_syms()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accumulator_var_syms(this->accumulator_var_syms_size() - 1).data(),
            this->accumulator_var_syms(this->accumulator_var_syms_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accumulator_var_syms");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_accumulator_var_syms;
        if (input->ExpectTag(98)) goto parse_loop_batch_func_name;
        break;
      }

      // required string loop_batch_func_name = 12;
      case 12: {
        if (tag == 98) {
         parse_loop_batch_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loop_batch_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loop_batch_func_name().data(), this->loop_batch_func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loop_batch_func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_prefetch_batch_func_name;
        break;
      }

      // optional string prefetch_batch_func_name = 13;
      case 13: {
        if (tag == 106) {
         parse_prefetch_batch_func_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefetch_batch_func_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefetch_batch_func_name().data(), this->prefetch_batch_func_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefetch_batch_func_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_ordered;
        break;
      }

      // required bool is_ordered = 14;
      case 14: {
        if (tag == 112) {
         parse_is_ordered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ordered_)));
          set_has_is_ordered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_repeated;
        break;
      }

      // required bool is_repeated = 15;
      case 15: {
        if (tag == 120) {
         parse_is_repeated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_repeated_)));
          set_has_is_repeated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.ExecForLoop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.ExecForLoop)
  return false;
#undef DO_
}

void ExecForLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.ExecForLoop)
  // required int32 exec_for_loop_id = 1;
  if (has_exec_for_loop_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exec_for_loop_id(), output);
  }

  // required int32 iteration_space_id = 2;
  if (has_iteration_space_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iteration_space_id(), output);
  }

  // required int32 parallel_scheme = 3;
  if (has_parallel_scheme()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->parallel_scheme(), output);
  }

  // repeated int32 space_partitioned_dist_array_ids = 4;
  for (int i = 0; i < this->space_partitioned_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->space_partitioned_dist_array_ids(i), output);
  }

  // repeated int32 time_partitioned_dist_array_ids = 5;
  for (int i = 0; i < this->time_partitioned_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->time_partitioned_dist_array_ids(i), output);
  }

  // repeated int32 global_indexed_dist_array_ids = 6;
  for (int i = 0; i < this->global_indexed_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->global_indexed_dist_array_ids(i), output);
  }

  // repeated int32 dist_array_buffer_ids = 7;
  for (int i = 0; i < this->dist_array_buffer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dist_array_buffer_ids(i), output);
  }

  // repeated int32 written_dist_array_ids = 8;
  for (int i = 0; i < this->written_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->written_dist_array_ids(i), output);
  }

  // repeated int32 accessed_dist_array_ids = 9;
  for (int i = 0; i < this->accessed_dist_array_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->accessed_dist_array_ids(i), output);
  }

  // repeated bytes global_read_only_var_vals = 10;
  for (int i = 0; i < this->global_read_only_var_vals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->global_read_only_var_vals(i), output);
  }

  // repeated string accumulator_var_syms = 11;
  for (int i = 0; i < this->accumulator_var_syms_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->accumulator_var_syms(i).data(), this->accumulator_var_syms(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "accumulator_var_syms");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->accumulator_var_syms(i), output);
  }

  // required string loop_batch_func_name = 12;
  if (has_loop_batch_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop_batch_func_name().data(), this->loop_batch_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loop_batch_func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->loop_batch_func_name(), output);
  }

  // optional string prefetch_batch_func_name = 13;
  if (has_prefetch_batch_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefetch_batch_func_name().data(), this->prefetch_batch_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefetch_batch_func_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->prefetch_batch_func_name(), output);
  }

  // required bool is_ordered = 14;
  if (has_is_ordered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_ordered(), output);
  }

  // required bool is_repeated = 15;
  if (has_is_repeated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_repeated(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.ExecForLoop)
}

::google::protobuf::uint8* ExecForLoop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.ExecForLoop)
  // required int32 exec_for_loop_id = 1;
  if (has_exec_for_loop_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exec_for_loop_id(), target);
  }

  // required int32 iteration_space_id = 2;
  if (has_iteration_space_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iteration_space_id(), target);
  }

  // required int32 parallel_scheme = 3;
  if (has_parallel_scheme()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->parallel_scheme(), target);
  }

  // repeated int32 space_partitioned_dist_array_ids = 4;
  for (int i = 0; i < this->space_partitioned_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->space_partitioned_dist_array_ids(i), target);
  }

  // repeated int32 time_partitioned_dist_array_ids = 5;
  for (int i = 0; i < this->time_partitioned_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->time_partitioned_dist_array_ids(i), target);
  }

  // repeated int32 global_indexed_dist_array_ids = 6;
  for (int i = 0; i < this->global_indexed_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->global_indexed_dist_array_ids(i), target);
  }

  // repeated int32 dist_array_buffer_ids = 7;
  for (int i = 0; i < this->dist_array_buffer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dist_array_buffer_ids(i), target);
  }

  // repeated int32 written_dist_array_ids = 8;
  for (int i = 0; i < this->written_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->written_dist_array_ids(i), target);
  }

  // repeated int32 accessed_dist_array_ids = 9;
  for (int i = 0; i < this->accessed_dist_array_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->accessed_dist_array_ids(i), target);
  }

  // repeated bytes global_read_only_var_vals = 10;
  for (int i = 0; i < this->global_read_only_var_vals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->global_read_only_var_vals(i), target);
  }

  // repeated string accumulator_var_syms = 11;
  for (int i = 0; i < this->accumulator_var_syms_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accumulator_var_syms(i).data(), this->accumulator_var_syms(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accumulator_var_syms");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->accumulator_var_syms(i), target);
  }

  // required string loop_batch_func_name = 12;
  if (has_loop_batch_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loop_batch_func_name().data(), this->loop_batch_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loop_batch_func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->loop_batch_func_name(), target);
  }

  // optional string prefetch_batch_func_name = 13;
  if (has_prefetch_batch_func_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefetch_batch_func_name().data(), this->prefetch_batch_func_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefetch_batch_func_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->prefetch_batch_func_name(), target);
  }

  // required bool is_ordered = 14;
  if (has_is_ordered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_ordered(), target);
  }

  // required bool is_repeated = 15;
  if (has_is_repeated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_repeated(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.ExecForLoop)
  return target;
}

int ExecForLoop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exec_for_loop_id = 1;
    if (has_exec_for_loop_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exec_for_loop_id());
    }

    // required int32 iteration_space_id = 2;
    if (has_iteration_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iteration_space_id());
    }

    // required int32 parallel_scheme = 3;
    if (has_parallel_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parallel_scheme());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // required string loop_batch_func_name = 12;
    if (has_loop_batch_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loop_batch_func_name());
    }

    // optional string prefetch_batch_func_name = 13;
    if (has_prefetch_batch_func_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefetch_batch_func_name());
    }

    // required bool is_ordered = 14;
    if (has_is_ordered()) {
      total_size += 1 + 1;
    }

    // required bool is_repeated = 15;
    if (has_is_repeated()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 space_partitioned_dist_array_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->space_partitioned_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->space_partitioned_dist_array_ids(i));
    }
    total_size += 1 * this->space_partitioned_dist_array_ids_size() + data_size;
  }

  // repeated int32 time_partitioned_dist_array_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->time_partitioned_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->time_partitioned_dist_array_ids(i));
    }
    total_size += 1 * this->time_partitioned_dist_array_ids_size() + data_size;
  }

  // repeated int32 global_indexed_dist_array_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->global_indexed_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->global_indexed_dist_array_ids(i));
    }
    total_size += 1 * this->global_indexed_dist_array_ids_size() + data_size;
  }

  // repeated int32 dist_array_buffer_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dist_array_buffer_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dist_array_buffer_ids(i));
    }
    total_size += 1 * this->dist_array_buffer_ids_size() + data_size;
  }

  // repeated int32 written_dist_array_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->written_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->written_dist_array_ids(i));
    }
    total_size += 1 * this->written_dist_array_ids_size() + data_size;
  }

  // repeated int32 accessed_dist_array_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->accessed_dist_array_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->accessed_dist_array_ids(i));
    }
    total_size += 1 * this->accessed_dist_array_ids_size() + data_size;
  }

  // repeated bytes global_read_only_var_vals = 10;
  total_size += 1 * this->global_read_only_var_vals_size();
  for (int i = 0; i < this->global_read_only_var_vals_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->global_read_only_var_vals(i));
  }

  // repeated string accumulator_var_syms = 11;
  total_size += 1 * this->accumulator_var_syms_size();
  for (int i = 0; i < this->accumulator_var_syms_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->accumulator_var_syms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecForLoop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecForLoop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecForLoop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecForLoop::MergeFrom(const ExecForLoop& from) {
  GOOGLE_CHECK_NE(&from, this);
  space_partitioned_dist_array_ids_.MergeFrom(from.space_partitioned_dist_array_ids_);
  time_partitioned_dist_array_ids_.MergeFrom(from.time_partitioned_dist_array_ids_);
  global_indexed_dist_array_ids_.MergeFrom(from.global_indexed_dist_array_ids_);
  dist_array_buffer_ids_.MergeFrom(from.dist_array_buffer_ids_);
  written_dist_array_ids_.MergeFrom(from.written_dist_array_ids_);
  accessed_dist_array_ids_.MergeFrom(from.accessed_dist_array_ids_);
  global_read_only_var_vals_.MergeFrom(from.global_read_only_var_vals_);
  accumulator_var_syms_.MergeFrom(from.accumulator_var_syms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exec_for_loop_id()) {
      set_exec_for_loop_id(from.exec_for_loop_id());
    }
    if (from.has_iteration_space_id()) {
      set_iteration_space_id(from.iteration_space_id());
    }
    if (from.has_parallel_scheme()) {
      set_parallel_scheme(from.parallel_scheme());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_loop_batch_func_name()) {
      set_loop_batch_func_name(from.loop_batch_func_name());
    }
    if (from.has_prefetch_batch_func_name()) {
      set_prefetch_batch_func_name(from.prefetch_batch_func_name());
    }
    if (from.has_is_ordered()) {
      set_is_ordered(from.is_ordered());
    }
    if (from.has_is_repeated()) {
      set_is_repeated(from.is_repeated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecForLoop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecForLoop::CopyFrom(const ExecForLoop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecForLoop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00006807) != 0x00006807) return false;

  return true;
}

void ExecForLoop::Swap(ExecForLoop* other) {
  if (other != this) {
    std::swap(exec_for_loop_id_, other->exec_for_loop_id_);
    std::swap(iteration_space_id_, other->iteration_space_id_);
    std::swap(parallel_scheme_, other->parallel_scheme_);
    space_partitioned_dist_array_ids_.Swap(&other->space_partitioned_dist_array_ids_);
    time_partitioned_dist_array_ids_.Swap(&other->time_partitioned_dist_array_ids_);
    global_indexed_dist_array_ids_.Swap(&other->global_indexed_dist_array_ids_);
    dist_array_buffer_ids_.Swap(&other->dist_array_buffer_ids_);
    written_dist_array_ids_.Swap(&other->written_dist_array_ids_);
    accessed_dist_array_ids_.Swap(&other->accessed_dist_array_ids_);
    global_read_only_var_vals_.Swap(&other->global_read_only_var_vals_);
    accumulator_var_syms_.Swap(&other->accumulator_var_syms_);
    std::swap(loop_batch_func_name_, other->loop_batch_func_name_);
    std::swap(prefetch_batch_func_name_, other->prefetch_batch_func_name_);
    std::swap(is_ordered_, other->is_ordered_);
    std::swap(is_repeated_, other->is_repeated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecForLoop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecForLoop_descriptor_;
  metadata.reflection = ExecForLoop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAccumulatorValue::kSymbolFieldNumber;
const int GetAccumulatorValue::kCombinerFieldNumber;
#endif  // !_MSC_VER

GetAccumulatorValue::GetAccumulatorValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:orion.bosen.task.GetAccumulatorValue)
}

void GetAccumulatorValue::InitAsDefaultInstance() {
}

GetAccumulatorValue::GetAccumulatorValue(const GetAccumulatorValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:orion.bosen.task.GetAccumulatorValue)
}

void GetAccumulatorValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combiner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccumulatorValue::~GetAccumulatorValue() {
  // @@protoc_insertion_point(destructor:orion.bosen.task.GetAccumulatorValue)
  SharedDtor();
}

void GetAccumulatorValue::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (combiner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combiner_;
  }
  if (this != default_instance_) {
  }
}

void GetAccumulatorValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAccumulatorValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAccumulatorValue_descriptor_;
}

const GetAccumulatorValue& GetAccumulatorValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

GetAccumulatorValue* GetAccumulatorValue::default_instance_ = NULL;

GetAccumulatorValue* GetAccumulatorValue::New() const {
  return new GetAccumulatorValue;
}

void GetAccumulatorValue::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_combiner()) {
      if (combiner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        combiner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAccumulatorValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:orion.bosen.task.GetAccumulatorValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_combiner;
        break;
      }

      // required string combiner = 2;
      case 2: {
        if (tag == 18) {
         parse_combiner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combiner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->combiner().data(), this->combiner().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "combiner");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:orion.bosen.task.GetAccumulatorValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:orion.bosen.task.GetAccumulatorValue)
  return false;
#undef DO_
}

void GetAccumulatorValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:orion.bosen.task.GetAccumulatorValue)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // required string combiner = 2;
  if (has_combiner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->combiner().data(), this->combiner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "combiner");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->combiner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:orion.bosen.task.GetAccumulatorValue)
}

::google::protobuf::uint8* GetAccumulatorValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:orion.bosen.task.GetAccumulatorValue)
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required string combiner = 2;
  if (has_combiner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->combiner().data(), this->combiner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "combiner");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->combiner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orion.bosen.task.GetAccumulatorValue)
  return target;
}

int GetAccumulatorValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required string combiner = 2;
    if (has_combiner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combiner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccumulatorValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAccumulatorValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAccumulatorValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAccumulatorValue::MergeFrom(const GetAccumulatorValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_combiner()) {
      set_combiner(from.combiner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAccumulatorValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAccumulatorValue::CopyFrom(const GetAccumulatorValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccumulatorValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetAccumulatorValue::Swap(GetAccumulatorValue* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(combiner_, other->combiner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAccumulatorValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAccumulatorValue_descriptor_;
  metadata.reflection = GetAccumulatorValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace bosen
}  // namespace orion

// @@protoc_insertion_point(global_scope)
